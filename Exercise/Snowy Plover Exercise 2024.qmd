---
title: "Snowy Plover Quarto Exercise 2024"
format: docx
urlcolor: blue
execute:
  warning: false
  error: false
---

# Participant Exercise Overview

The objective of this exercise is to expose you to creating a quarto document through the example of a Western Snowy Plover survey. If you frequently use R for data manipulation and analysis, but take those outputs (tables, figures, etc.) and piece them together into Microsoft word for your final product, learning how to make dynamic reports within quarto and render them into your final format has many advantages. For starters, you will only need to interface with quarto - not R and then word, PDF, HTML, etc. You can also build documents to be dynamic with the use of parameters which makes reproducing reports, analysis, outputs easy and automated. Version control and code sharing becomes much more streamlined as both the text and associated code is stored in a single (or few) files.

Okay, so isn't quarto the same thing as R markdown? What is the difference? Good question. Quarto is an open-source scientific and technical publishing system that allows you to weave together narrative text and code to produce high-quality outputs including reports, presentations, websites, and more. Quarto does all the things R markdown did but has been expanded to become language-agnostic. This means that different languages, R, Python, Julia, and other code can be rendered from within a quarto document. This essentially allows quarto documents to be extremely flexible when it comes to the code being used. Due to the increased language support and the active development, becoming comfortable using quarto is our recommendation. 

This exercise isn't comprehensive by no means, but should provide a simple introduction to how quarto documents work and some of the things you can do within them. The exercise begins with developing headings, formatting text and creating nice looking mathematical equations. That is followed by creating three different types of outputs to be rendered into the document: an interactive map, a table, and a plot. Finally, the exercise finishes with demonstrating the use of inline code in text as well as other areas of the R Markdown document. These exercises demonstrate some of the great capabilities of quarto documents but certainly do not cover the full spectrum of possibilities. We encourage you to identify reports, analyses and documents in your own work and create, or recreate, them using quarto.

## Exercise 1

### Create a new R Project

As a best practice for any new project in R, it is worth creating an R Project. R projects helps organize many aspects of your analysis from importing data to exporting reports and figures. A major advantage is it eliminates the need to manage your working directory. You will no longer need to use absolute file paths as the project is given the root directory upon creation and accessing files branches from there.In short, it is worth incorporating R Projects into your workflows if you have not already. To create an R Project for our exercise, do the following:

1. Open the R Studio IDE and in the upper left hand corner click the **New File** icon: ![New File icon](Images/R_Proj_icon.JPG)

2. Then select **New Directory** from the New Project Wizard pup-up: ![New Directory](Images/Create_Project.JPG)

3. Select **New Project** from the New Project Wizard pup-up: ![New Project](Images/Project_Type.JPG)

4. Lastly, choose the file path you'd like this R Project to be saved and give it a name!

You can also easily view your file path and folder structure by referencing the **File Pane** in the R Studio IDE. This makes it convenient to access any scripts, datasets, or outputs that are now housed within this R Project.

### Create a new Quarto Document

First, we need to open a new quarto document which will be saved inside our R Project. Let's break this down into 5 individual steps:

1. If you are unfamiliar with how to do this, upper left corner of the R Studio IDE, click the **New File** icon: ![New File icon](Images/New_File_icon.JPG)

2. Then select **Quarto Document...** from the dropdown list: ![Quarto Document dropdown icon](Images/new_quarto_document.JPG)

3. Lastly, give this new document a title and author name and then make sure to select **HTML** as the default output format (example of what to populate in the screenshot): ![Quarto Document dropdown icon](Images/Quarto_details.JPG){width=65%}

4. Click **Ok** and you should have a new .qmd file open with some generic example text/code to help get you started. Go ahead and delete everything below the **YAML** header so we have a fresh canvas to work from. We now should be ready to build out our document.

5. Nice job!

We will render this document to HTML to highlight the interactivity that HTML documents provide. Markdown was originally designed for HTML output, therefore this is the most robust output option as far as features are concerned. However, most reports will warrant a Word or PDF document but if this document is only something you may run and view personally, HTML can be a great option. You can also create Quarto websites using the HTML output. This relies on the ability to host the webpage somewhere. Pretty convienent options for hosting your webpage would be to host it on GitHub or Posit Connect.   

## Exercise 2

### Setting Up Code Blocks

Code blocks are what integrate code into the quarto document to create reproducible objects, such as figures, tables, and text. Throughout the exercise, reference code blocks are provided for you to follow along. Here are a few ways to insert code blocks into the document:

1. Using the keyboard shortcut **Ctrl + Alt + I**.

2. Add code block ![R markdown dropdown icon](Images/code_chunk.PNG) command in the editor toolbar.

3. Typing the code block delimiters into the document: ![Code Chunk Delimiter](Images/chunk_delimiter.PNG).

Code blocks can be customized with *execution* options. Those arguments can be set at the top of the code block and some commonly used arguments are below:

1. **label**: Gives the code block a name and is required to be unique.

2. **eval**: Evaluate the code block (if *false*, just echos the code into the output).

3. **echo**: Include the source code in output

4. **output**: Include the results of executing the code in the output (true, false, or asis to indicate that the output is raw markdown and should not have any of Quartoâ€™s standard enclosing markdown).

5. **warning**: Include warnings in the output.

6. **error**: Include errors in the output (note that this implies that errors executing code will not halt processing of the document).

7. **include**: Catch all for preventing any output (code or results) from being included (e.g. include: false suppresses all output from the code block).

8. **fig-cap**: Adds a caption to graphical results.

You can also set options **Globally** so it is applied to all the code blocks. Let's do this in our **YAML** header by incorporating the following: ![Execute YAML](Images/execute_YAML.JPG)

Reference the [Quarto Guide](https://quarto.org/docs/guide/) for a complete list of code chunk options and for many other features of Quarto!

### Install and Load R Packages

To make installing and loading packages easier, a simple function that checks to see if a package is not installed and if so, prompts R to install it (thanks Jonah!). This is very convienent for sharing code with others and making it more seamless for package installation. If the package is installed, or once it is, it will then be loaded.

Please reference the following code block:
```{r}
#| label: Package Install and Load
#| echo: true
#| output: false

## Install and load packages

# Create vector of packages

requiredPackages <- c("tidyverse", "ggplot2", "readxl", "mapview", "sf", "gt", "janitor", "purrr", "english", "knitr")

# Function to install and load any packages not installed

ipak <- function(pkg){
  new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
  if (length(new.pkg))
  install.packages(new.pkg, dependencies = TRUE)
  sapply(pkg, require, character.only = TRUE)
}

# Load packages

ipak(requiredPackages)
```

Remember to include the approipriate exection options at the top of the code block.

### Import Dataset

Who doesn't love plovers!? Lets use this awesome FWS dataset on Western Snowy Plovers (*Charadrius alexandrinus nivosus*) to create a pretty simple R Markdown document. To access the dataset we will be using for this exercise, [click here to go to the ServCat reference](https://ecos.fws.gov/ServCat/Reference/161269) and **Download** the *Western_Snowy_Plover_Window_Survey_dataset.xlsx* excel file from the **Files and Links** tab. Next, create a **Data** folder in the file path where your R Project is saved. Save the *Western_Snowy_Plover_Window_Survey_dataset.xlsx* in this newly created **Data** folder. Importing and loading data is where R Projects greatly help with file path management. 

Please reference the following code block:

```{r}
#| label: Data Import
#| echo: true
#| output: false

# Read excel data from the Projects "Data" folder. 

data <- read_excel("Data/Western_Snowy_Plover_Window_Survey_dataset.xlsx") # Read in our downloaded plover dataset.
head(data) # Show the first few rows of data.
```

You will want to included *output = false* as a executin option for this code block. We did this to hide the output from viewing the first few rows of data using the *head()* function. This is convenient because we can view that output below the code block in our .qmd file in R Studio but it does not appear when rendered. Feel free to play around with these code block options to get a feel for what they do when rendering to a document. 

Now that we have our packages loaded and our dataset imported, we can begin to build our document.

## Exercise 3

### Headings and Subheadings

Let's begin the text portion of this document with a header. In R Markdown, we use hashtags (\#) to denote headings or subheadings. The number of hashtags determines the headings hierarchy.

Below is the breakdown of heading hierarchy:

```{r}
#| label: Headings

# Heading 1  
## Heading 2  
### Heading 3 
#### Heading 4  
##### Heading 5  
###### Heading 6 
```

Give this document a heading with the highest heading hierarchy (Heading 1: **single \#**) with the text:

> Quarto Snowy Plover Report Exercise 

Render to see how the document is affected. 

### Adding and Formatting Text

Let's now add some text beneath our big 'ol heading. In an attempt to add some uniqueness to this exercise, please write out a few lines of what you know about plovers. If you are completely unfamiliar with this super cool shorebird, maybe describe what kind of bird you think it is and where it may live (hint... it's a shorebird). Knit to HTML to see how the document is affected. 

Now that you dropped some knowledge about plovers, let us drop some knowledge about formatting. We will choose a few random words from your sentence about plovers and do the following:

1. Choose a random word and **bold** it. This is done by putting double asterisks (\**) around the word you want to bold. 

2. The same goes for *italics* except that requires only a single asterisks (\*) around the word. Select another word and italicize it. 

3. Choose another random word and we will do a ~~strikethrough~~. This is done by putting two tilde's (\~) around each end of the word or sentence you want to strikethrough. A single tilde on the end of a word or sentence creates a ~subscript~. 

4. Let's add a list with sub items beneath your plover paragraph. This is done by using asteriks (\*) and the plus sign tabbed (\+). A space after each asterisk or plus sign is needed otherwise it will be treated as a continuation of the previous entry. Replicate the following list in your document:

* Plover Common Names
  + Piping Plover
  + Western Snowy Plover
  + American Golden-Plover
  + Black-bellied Plover


5. Lastly, Knit to HTML to see how the document is effected by our formatting changes.

### Mathematical Equations

Often times in scientific analysis or reports we will need to include formulas in our documents. This is pretty slick in a Quarto Document! The reason being is that quarto mathematical typesetting is based on LaTeX, so the possibilities are endless when creating any customized equation. Let's add a subheader (Heading 2) to our document titled:

> Western Snowy Plover Analysis 

Then add the following text to describe what our plover analysis is:

> There are many interesting research questions when it comes to the Western Snowy Plover. One that someone might be interested in regarding our dataset is what is the percentage of juvenile plovers in relation to all the plovers observed during our survey? This results in a pretty simple analysis which is just a classic average. Below is the formula used in this analysis:

Next we will display our formula as a "displayed equation". There are two options: inline mathematics or displayed equations. The difference between the two is whether you have a single (\$; inline) or double (\$$; displayed) dollar sign surrounding the mathematical notation. Replicate the following analysis formula on a new line (not in a code block; ignore the #) below the text:

```{r}
#| label: Equation

# $$\frac{Number\:of\:Juvenile\:Plovers}{Total\:Number\:of\:Plovers}*100 = Percentage\:of\:Juvenile\:Plovers$$ 
```

The latex expression above will result in the following nice clean equation:

$$\frac{Number\:of\:Juvenile\:Plovers}{Total\:Number\:of\:Plovers}*100 = Percentage\:of\:Juvenile\:Plovers$$

Not only can you view it in the rendered document (go ahead and knit to see the formula in our output) but you should be able to preview it the .qmd file! This makes it really convenient to build complex equations without having to "render and check" with each modification. 

## Exercise 4

### Data Wrangling

We are now at a point with our document where we want to start displaying data. As with most datasets, our first move is going to be to clean the data in a way that will make it much easier for us to handle as we move forward. The ability to tidy our data in our .Rmd file goes a long way when replicating analysis or coming back to a project later and trying to determine what we did. We will use the **dplyr** package (bundled within the tidyverse package) to wrangle our data. If you are unfamiliar with this package or the tidyverse in general, we strongly suggest you look into it! 

After a quick glance, it appears our Western Snowy Plover dataset is in pretty good shape but let's clean it up a little more. 

Please reference the following code chunk:

```{r}
#| label: Data Tidying
#| echo: true

# Manipulating the data in preperation for outputs using dplyr funtions.

data <- data %>% 
  select(Site, x, y, Date, `# Males`, `# Females`, `# Juveniles`, `Total Number of Western Snowy Plovers Observed`, `Survey Season`, Behavior) %>% # Selects specified columns.
  rename(Longitude = x, Latitude = y, Total = `Total Number of Western Snowy Plovers Observed`, Males = `# Males`, Females = `# Females`, Juveniles = `# Juveniles`) %>% # Renames specified columns.
  mutate(Behavior = replace_na(Behavior, "unknown")) # Assigns "unknown" to NA values within this column.
```

### Interactive Mapping

With our dataset now clean and ready to be used, let's start our figures section with a map. When rendering to HTML, we have the ability to create interactive maps. We will create a map plotting the location of Western Snowy Plover observation locations. Before we begin, let's create a new subheading to denote we are in a new section of our document:

> Map, Table and Figure

To create the interactive map, we are going to use the **MapView** package. This package is great for quickly and conveniently create interactive visualizations of spatial data. Before we do that, we need to create a sf object from our dataset so the MapView package can determine the geometry and plot our points. 

Please reference the following code block:

```{r}
#| label: Plover Map
#| echo: true
#| output: false
#| results: hide

# Create an interactive map of plover sighting locations.

plover_points <- st_as_sf(data, coords = c("Longitude", "Latitude"), crs = 4326) # Converts our dataset to a sf object with geometry.
mapview(plover_points, col.regions = "red") # Interactive map displaying plover observation locations with a red point.
```

You should have a interactive map with red points that represent locations where plovers were observed during the survey. You can change the basemap imagery and click on individual points to see a pop-up with metadata about the point. Pretty cool huh? Go ahead and play around with your new map. Keep in mind this feature is only available in HTML. When rendering to word or PDF, other packages, such as **ggplot2**, give you the ability to create very attractive static maps.

Beneath our map output, add a few sentences worth of text describing the map we just made. 

> Figure 1. Map description text...

### Basic Plover Table

Most likely you will want to create tables to display information in the documents you create. There are a few different ways to make aesthetically pleasing tables in R Markdown but we will use the **gt** package for our Western Snowy Plover exercise. An important note with the gt package is that currently it does not support Word document output. 

Let's create a table displaying our Western Snowy Plover Observations. We want this table to summarize the total number of plovers by male, female or juvenile as well as all the plovers observed regardless if the aforementioned determinations could be made about gender or life-stage. We also want this table to show these sums by the two different survey seasons: summer and winter. 

Please reference the following code chunk:

```{r}
#| label: Plover Table
#| echo: true
#| output: false

# Create a table of plover sighting information.

plover_table <- data %>% 
  select(Site, Males, Females, Juveniles, Total, `Survey Season`) %>% # Selects specified columns.
  group_by(Site, `Survey Season`) %>% # Groups by the specified columns.
  summarise(Males = sum(Males), Females = sum(Females), Juveniles = sum(Juveniles), All = sum(Total)) %>% # Sums each of our plover columns. 
  adorn_totals() %>% # Super easy way to get a "Totals" row in a data frame. This function is from the janitor package.
  gt(groupname_col = "Survey Season") %>% # Convert data frame to a gt table and group columns by survey season.
  tab_header(title = md("Western Snowy Plover Observations"), subtitle = md("Total number of plovers seperated by survey season - 2021")) %>% # Generates a title and subtitle for the table.
  tab_source_note(md("Big shout out to the biologists from the Columbia-Pacific Northwest Region for the dataset!")) # Generates a footnote for the table.

plover_table # Calls the table.
```

You should now have a nice, clean and simple table in your document. This table is very simplistic but you can certainly get more advanced such as hierarchic column spanners, footnotes, and dynamic cell coloring. To continue adding context to our exercise document, add a few sentences worth of text describing the table we just made and what it is displaying above the rendered output.

> Table 1. Table description text...

### Simple Plover Plot

Plots are a staple of analysis and reports in the biological field of study. So, let's create a plot to output into our document! Creating plots is extremely easy using the **ggplot2** package. This is a widely used package that many of you are already familiar with I'm sure. Let's create a pie chart that shows the total number of plovers observed by the behavior they were displaying when they were observed.  

In order to give the figure a caption, include the following as a execution option at the top of the code block:
\newline
**#| fig.cap:** "Figure 1.  Pie chart displaying the total number of Western Snowy Plovers observed during the survey by their behavior when observed. The total number of plovers by behavior is denoted inside the pie slice by  corresponding color."
\newline
Depending on the output, R Markdown will manage figure numbering based on their location in the .Rmd file.

Please reference the following code chunk:

```{r}
#| label: Plover Plot
#| echo: true
#| output: false

# Create a pie chart of plover behavior data.

plover_plot <- data %>% 
  select(Site, Total, Behavior) %>% # Selects specified columns.
  group_by(Behavior) %>% # Groups by the specified columns.
  summarise(All = sum(Total)) %>% # Sums the Total column and renames it to All. 
  ggplot(., aes(x = "", y = All, fill = Behavior)) + # Creates plot and maps the aesthetics.
  geom_col(color = "black") + # Builds a bar chart with the data.
  geom_text(aes(label = All), position = position_stack(vjust = 0.5)) + # Provides labels.
  coord_polar(theta = "y") + # Polar coordinate system that essentially circles a stacked bar chart.
  theme_void() # Gives the plot a preconfigured theme.

plover_plot # Calls the plot.
```

We should now have a pie chart in our document. Feel free to manipulate the ggplot portion of the code or the figure caption to see how it effects the plot when rendered. Go ahead and add a few sentences worth of text describing the plot we just made and what it is displaying.

> Text briefly describing what our plot is showing...

## Exercise 5

### Inline Code

This might be one of our most favorite features of using a quarto document when creating annual type reports - the ability to insert code results directly into text! We do this by enclosing code with **Insert inline call here** in the section of text in which we would like the results to appear. This makes it super easy to update values or text in a report. It is important to note that quarto will always display the results of inline code, but not the code and apply relevant text formatting to the results. 

Let's finish off our plover exercise document with a summary section. create a new subheading to denote we are in a new section of our document:

> Plover Findings Summary 

Now we will add a short paragraph summarizing some of the things we learned about the Western Snowy Plover during the survey. When writing inline code, it can often times be useful to build out your code in a code chunk or in the console to verify the potential output as inline code chunks do not provide a "preview" in the .qmd. We will breakdown each sentence in our paragraph as follows:

1. The Western Snowy Plover survey was a great success this year, with surveys occurring from 'r data %>% summarise(first = min(Date)) %>% mutate(month = months(first)) %>% pluck('month')' to 'r data %>% summarise(last = max(Date)) %>% mutate(month = months(last)) %>% pluck('month')'. 

2. Observers turned out in good numbers to support the annual plover surveys and ended up conducting a total of 'r data %>% nrow()' surveys.

3. A combined 'r data %>% group_by(Site) %>%  summarise() %>% nrow() %>% words()' different locations were surveyed that are traditionally used by the birds, specifically, these locations were: 'r data %>% group_by(Site) %>%  summarise() %>% pluck('Site') %>% combine_words(.)'. 

4. You're Turn! Write the inline code that will generate the desired outputs of the following sentence: The final bird count was a total of **'r'** plovers observed resulting in a average of **'r'** plovers per observation, a great success on all accounts! Round the average plovers per observation to only show two digits (*hint:* Use base function **round()**). 

Compile these sentences into one paragraph to form the closing statement of our very brief Western Snowy Plover report. The paragraph should render to read as such:

> The Western Snowy Plover survey was a great success this year, with surveys occurring from **`r data %>% summarise(first = min(Date)) %>% mutate(month = months(first)) %>% pluck("month")`** to **`r data %>% summarise(last = max(Date)) %>% mutate(month = months(last)) %>% pluck("month")`**. Observers turned out in good numbers to support the annual plover surveys and ended up conducting a total of **`r data %>% nrow()`** surveys. A combined **`r data %>% group_by(Site) %>% summarise() %>% nrow() %>% words()`** different locations were surveyed that are traditionally used by the birds, specifically, these locations were: **`r data %>% group_by(Site) %>%  summarise() %>% pluck("Site")`**. The final bird count was a total of **`r data %>% summarise(Sum = sum(Total)) %>% pluck("Sum")`** plovers observed resulting in a average of **`r data %>% summarise(Mean = round(mean(Total), 2)) %>% pluck("Mean")`** plovers per observation, a great success on all accounts! 

If you recreated the paragraph displayed above, nice job! As you can see, inline code can be very flexible when building out text within a report or document. The use of the functions *pluck()* (**purrr** package) *words()* (**english** package), and *combine_words()* (**knitr** package) really helps when extracting values from a data frame or converting numbers to words. Beyond just the text or body of a document, inline code can be used in other areas of a R Markdown document such as in the YAML header or code chunk options. A great use for reports is inserting inline code within the figure caption of a chart or table by including it in the *fig-cap""* option of the code block.

Let's add some inline code in our YAML header so our report always has today's date when the document is rendered. In the *date:* argument of the YAML header, insert the following inline code:

> "'r format(Sys.time(), '%B %d %Y')'"

You now have the date argument coded to show the systems current date whenever the document is render! Make sure to enclose the inline code in quotations otherwise it will cause an error when rendered. 

Finally, let's clean up our html document a bit by removing any remaining code that appears when rendered. Look over the code chunks to make sure they reflect **echo: false** to keep the code from appearing in our rendered HTML document. Also, if maps, tables, or figures are running in R but not appearing in the document, make sure your chunk options has **output: true** to show the output.

### Congratulations!

Excellent work. You have proven to have what it takes to be a good plover biologist who can harness the awesomeness of R to make automated reports and documents using Quarto - a super power if there ever was one! With great power comes great responsibility, so go forth and share the good word that reports and summary documents can be automated and you can spend that time saved on other aspects of researching the beloved plovers. 
