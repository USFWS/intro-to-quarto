---
title: |
   | Introduction 
   | to Quarto
subtitle: "Overview"
format: 
  refuge-revealjs:
    title-slide-attributes:
      data-background-image: "images/plover_title.png"
      data-background-size: 20%, cover
      data-background-position: "60% 50%, center"
    footer: "[Intro to Quarto](index.html){.small}"
editor: source
---

```{r}
#| echo: false
library(countdown)
```


## {.center}

[Course materials can be found at:]{.large}  
[https://github.com/USFWS/intro-to-quarto](https://github.com/USFWS/intro-to-quarto) [{{< fa brands github >}}](https://github.com/USFWS/intro-to-quarto).

::: {.notes}
- You can find the course materials at the website listed here.
:::


## Outline {.center}

- Overview of Quarto
- Components of a Quarto document
  - YAML metadata
  - Document body
  - Code blocks

::: {.notes}
- This workshop serves as an introduction to using Quarto to create reports.
- During our time here, we will provide a brief overview of what Quarto is, what it can do for you, and how it compares to R Markdown. We will then dive into the anatomy of a Quarto file, which can be broken into three primary components: the YAML metadata, the document body, and code blocks (or code "chunks").
- The workshop is a series of short presentations followed by hand-on exercises to practice what you've learned.
- We will be available to provide help during the exercises, so let us know by raising your hand (in person or virtually!)
:::


# The powers of <br> ![](images/super_quarto.png){width=600 fig-alt="Superman holding a pencil with city buildings in the background and Quarto written below him"} {.dark}

::: {.notes}
- Ok, let's dive into the world of creating documents using Quarto.
- Quarto is a multi-language next generation version of R Markdown.
- What can you do with Quarto?
    - Generate dynamic output using R. Python, and other languages that can be regenerated when the data change.
    - Has support for equations and citations.
    - Integrates well into RStudio and other code editors
    - Can create interactive documents by embedding html widgets and Shiny.
- It's quite powerful!
:::


## Outputs: [Documents]{.gray-bold}

::: {.center}
{{< pdf images/example_report.pdf width=75% height=775 >}}
:::

::: {.notes}
- Quarto can produce high quality documents in HTML, PDF or MS Word
- Has the ability to output content using standardized templates, as shown here for a refuge report.
:::


## Output: [Websites]{.gray-bold}

```{=html}
<iframe width="1600" height="800" src="https://usfws.github.io/Science_Applications_Metadata_Guidance/" title="USFWS Science Applications Metadata Guidance"></iframe>
```

::: {.notes}
- Quarto can also create websites, such as this Science Applications Metadata Guidance.
- The course website that we are using today was created in Quarto.
:::


## Outputs: [Presentations]{.gray-bold}

```{=html}
<iframe width="1600" height="800" src="https://usfws.github.io/data-workflow-presentation/#/a-reproducible-data-workflow/" title="Presentation slides from a Reproducible Data Workflow presentation"></iframe>
```

::: {.notes}
- Quarto can also output professional-looking presentations as HTML-based Revealjs presentations or as PowerPoint. Templates are available online or with a little CSS code, you can create your own.
:::


## Outputs: [Books]{.gray-bold}

```{=html}
<iframe width="1600" height="800" src="https://r4ds.hadley.nz/" title="R for Data Science ebook"></iframe>
```

::: {.notes}
Finally, it's possible to write books using Quarto, such as the R for Data Science book shown here.

- To summarize, Quarto is an open-source scientific and technical publishing system.
- Instead of writing a report or presentation in Word, PowerPoint, etc.; then running code in an R script; then saving output and visualizations; and then pasting them in the report or the presentation
- We can do it all in Quarto, a free system especially tailored to scientific and technical publishing. 
:::


## Quarto and R Markdown

:::{.fragment}
![](images/render1.png){height=800 fig-alt="A diagram showing the process of rendering a document using R Markdown."}
:::

::: {.notes}
- How does it work? If you are familiar with R Markdown, you are probably familiar with this pipeline.
- You start out with an R Markdown document, which includes text and R code.
:::


## Quarto and R Markdown

![](images/render2.png){height=800 fig-alt="A diagram showing the process of rendering a document using R Markdown."}  

::: {.notes}
- When you knit an R Markdown file, a R package "knitr" calls the engine knitr to execute your R code, and create an Markdown file that include and then uses Pandoc to produce whatever output you’ve specified.
:::

## Quarto and R Markdown

![](images/render3.png){height=800 fig-alt="A diagram showing the process of rendering a document using R Markdown."}  

::: {.notes}

:::


## Quarto and R Markdown

:::{.fragment}
![](images/render4.png){height=800 fig-alt="A diagram showing the process of rendering a document using Quarto."}  
:::

::: {.notes}
- A Quarto .qmd file on the other hand can be composed of text and R, Python, and/or Julia code. 
:::


## Quarto and R Markdown

![](images/render5.png){height=800 fig-alt="A diagram showing the process of rendering a document using Quarto."}  

::: {.notes}
- Either the knitr or jupyter engines will then render your text and code into a Markdown file followed by Pandoc producing whatever output you’ve specified.
Quarto accomplishes this by being fully separate from the R ecosystem. You can even run it from the command-line interface (i.e., the shell or terminal), if you want to. 
:::


## Quarto and R Markdown

![](images/render6.png){height=800 fig-alt="A diagram showing the process of rendering a document using Quarto."}  

::: {.notes}

- Embedding code and output from Python, R, and JavaScript via integration with Jupyter, Knitr, and Observable.

- A variety of extensions to Pandoc markdown useful for technical writing including cross-references, sub-figures, layout panels, hoverable citations and footnotes, callouts, and more.

- A project system for rendering groups of documents at once, sharing options across documents, and producing aggregate output like websites and books.

- Authoring using a wide variety of editors and notebooks including JupyterLab, RStudio, and VS Code.

- A visual markdown editor that provides a productive writing interface for composing long-form documents.
:::


## When to use Quarto and R Markdown? 

::: columns

::: {.column width="40%"}

\

::: {.incremental}
- Weave together text, plots, tables, and statistics
- Frequently re-create a standardized document
- Reproduce your analyses
- Generate comparable reports across multiple parameters (species, watershed, state)
:::

:::

::: {.column width="60%"}
![](images/plover_thinking.png){height=800 fig-alt="An cartoon of a snowy plover thinking. There is a question mark above it's head."}
:::

:::

::: {.notes}

:::


## {background-image="images/plover_decision.png" background-size=contain}

::: {.notes}
You're at a crossroads! How do you decide whether to move from R Markdown to Quarto?
:::

## Advantage of R Markdown

::: columns

::: {.column width="40%" .incremental}
\

- Have existing R Markdown code that works for you
- Custom tools built around R Markdown that are not yet available in Quarto
:::

::: {.column width="60%"}
![](images/rmarkdown_packages.png){fig-align=center height=750 .drop}
:::

:::

::: {.notes}
- If you like using R Markdown, there’s no need to switch! R Markdown will continue to be supported and work as it always has been. You’re welcome to try Quarto if you like, but there’s no need to switch. 
- If you have a R Markdown file that includes custom tools, there is a chance that they might not yet in available in Quarto. If this is the case, you're of course welcome to stick with R Markdown. As they say, if it ain't broke, don't fix it.
:::


## Advantages of Quarto

::: columns

::: {.column width="60%"}

:::{.incremental}
- No requirement for R
- Fewer package dependencies
- revealjs slides are easier to work with
- Better cross referencing of figures, tables, and citations
- Quarto extensions allow for easier customization
- Quarto projects make it easier to customize websites and collaborate
- The future
:::

:::

::: {.column width="40%"}
![](images/quarto.png){.drop}
:::

:::

::: {.notes}
- That said, there are a number of advantage to using Quarto, including:
  - No requirement for R (multilingual)
    - R, Python, Julia, Javascript
  - More streamline and less R package dependencies
    - Use revealjs directly for pretty slides, rather than relying on R packages.
  - Cross referencing tables and tables in the text is more straightforward, as is inserting and managing citations.
  - A growing number of Quarto extensions add functionality
    - Allow you use customized templates and 
  - Quarto projects
    - Easier to create websites, books, collaborate on projects, etc.
  - Most active development has moved from R Markdown to Quarto. It will only get better with time.
:::


## Three ways to render Quarto

\

::: columns

::: {.column width="32%" .center}
::: {.fragment fragment-index=1}
### 1.  
**RStudio GUI**
![](images/quarto_render1.png){fig-alt="A screenshot of a Quarto document in RStudio. The Render button is circled in red" .drop}
:::
:::

::: {.column width="32%" .center}
::: {.fragment fragment-index=2}
### 2.   
**Quarto command line interface (CLI)**
![](images/quarto_render2.png){fig-alt="A screenshot of the command line terminal in RStudio. quarto render is typed in." .drop}
:::
:::

::: {.column width="36%" .center}
::: {.fragment fragment-index=3}
### 3. 
**Quarto R package**

::: {.small}
```r
quarto::quarto_render(input = ___, 
                      output_format = ___)
```
:::

:::
:::

:::

::: {.notes}

:::


## Authoring: Source and Visual panes

::: columns
::: {.column width="50%" .center}
![](images/source_pane.png){fig-alt="A screenshot of a Quarto document in RStudio viewed as Source." .drop}
:::

::: {.column width="50%" .center}
![](images/visual_pane.png){fig-alt="A screenshot of a Quarto document in RStudio viewed as Visual." .drop}
:::
:::

::: {.notes}

:::


# Exercise 1: [Rendering](exercises.qmd#sec-exercise1) {.exercise}

\
\
\

```{r}
countdown::countdown(10, bottom = 0)
```

::: {.notes}

:::


# Anatomy of a Quarto File {.dark}

::: {.notes}

:::


## ![](images/quarto_example1.png)

::: {.notes}

:::


## YAML header

**Y**et **A**nother **M**arkup **L**anguage = document metadata!

::: columns

::: {.column width="50%"}

::: {.fragment}
```{yml}
#| echo: TRUE
#| eval: FALSE

---
title: "Introduction to Quarto"
author: "FWS staff"
format: 
  revealjs:
    theme: [default, refuge_light.scss]
    subtitle: "Overview"
    height: 900
    width: 1600
editor: source
---
```
:::

:::

::: {.column width="50%" .small .incremental}
- Starts and ends with "\-\-\-"
- Uses key-value pairs: `key: value`
  - *Picky about spacing and indentations!*
- Processed during rendering
- Including options for:
  - Title, authors, date
  - File output(s) (e.g., `html`, `docx`)
  - Styling (e.g., `theme`, `fig-width`)
  - Parameters
:::

:::


::: {.notes}

:::


## YAML header: [Options]{.gray-bold} 

::: {.incremental}
- Options are dependent on the file output (**many** options {{< fa face-flushed >}})  
- Search the [Quarto guidance](https://quarto.org/docs/reference/) within your specified file format:

::: {.fragment}
```{=html}
<iframe width="1600" height="500" src="https://quarto.org/docs/reference/formats/docx.html" title="Quarto HTML Options guidance"></iframe>
```
:::

:::

::: {.notes}

:::


## YAML header: [Options]{.gray-bold}

::: columns

::: {.column width="50%"}
::: {.callout-tip}
## Another option: Use your friendly assistant!
- Start a word and hit <kbd>`tab`</kbd> to complete or ...
- Type <kbd>`Ctrl+space`</kbd> to see available options.
:::
:::

::: {.column width=50%"}

![](images/yml_assistant.png){fig-alt="A screenshot of a yaml for a quarto document in RStudio showing the drop-down menu with options available."}
:::

:::

::: {.notes}

:::



# Exercise 2: [YAML metadata](exercises.qmd#sec-exercise2) {.exercise}

\
\
\

```{r}
countdown::countdown(10, bottom = 0)
```

::: {.notes}

:::


## Text body: Markdown

::: columns

::: {.column width="50%"}
![](images/markdown.png){height="90%"}
:::

::: {.column width="50%" .incremental}
- Markdown is a markup language (e.g., HTML, teX, XML)
  - Add syntax to the text to change it's look
  - Mix text with markup instructions
- Quarto uses Pandoc Markdown
    - Inline or block elements
:::

:::

::: {.notes}

:::


## Text body

::: columns

::: {.column width="50%"}
### Inline elements

- Individual words in a sentence
- Images, links, equations, or code in a sentence
:::

::: {.column width="50%"}
### Block elements 

- Paragraphs or sections of a document
- Standalone images, figures, or figures
:::

:::

::: {.notes}

:::


## Inline elements: [Text]{.gray-bold}

\
 
::: columns

::: {.column width="50%"}

### Markdown  

```{.markdown}
This is an example of how you could change    
inline elements of text body Markdown in a FWS  
report. You can make a word *italicized* or  
**bold**. You can also display code, such as 
`exp(10) + 1`. You can even ~~strikethrough~~  
and make something a superscript^1^.
```
:::

::: {.column width="50%"}

### Output  
::: {.fragment}
::: {.small}
This is an example of how you could change  
inline elements of text body Markdown in a FWS 
report. You can make a word *italicized* or  
**bold**. You can also display code, such as  
`exp(10) + 1`. You can even ~~strikethrough~~  
and make something a superscript^1^.
:::
:::

:::

:::

::: {.notes}

:::


## Inline elements: [Math]{.gray-bold}

\
 
::: columns

::: {.column width="50%"}

### Markdown  
```{.markdown}
The solution to $sqrt(x) = 26$ is $x = 676$ and  
$\pi = 3.1415...$.
```
:::

::: {.column width="50%"}

### Output 
::: {.fragment}
::: {.small}
The solution to $sqrt(x) = 26$ is $x = 676$ 
and $\pi = 3.1415...$.
:::
:::

:::

:::

::: {.notes}

:::


## Inline elements: [Hyperlinks and images]{.gray-bold}

\
 
::: columns

::: {.column width="50%"}
### Markdown  
  
```markdown
For more information on how to use Quarto,  
check out the [Quarto webpage](www.quarto.com).
```
  
\

::: {.fragment fragment-index=2}
```markdown
Here's an image that is inline with  
my text ![icon](images/favicon.png).
```
:::

:::

::: {.column width="50%"}
### Output
::: {.small}
::: {.fragment fragment-index=1}
For more information on how to use Quarto,  
check out the [Quarto webpage](www.quarto.com).
:::

\

::: {.fragment fragment-index=3}
Here's an image that is inline with  
my text ![icon](images/favicon.png){.center-inline}.
:::
:::

:::

:::

::: {.notes}

:::


## Block elements: [Paragraphs]{.gray-bold}

::: columns
:::{.column width="50%"}
### Markdown

``` markdown
Here's a paragraph. To separate it from the next  
paragraph, you need to add one or more empty lines.

This is a new paragraph. You can format each  
paragraph independently. A paragraph is an  
examine  of a block element.

::: {.callout-tip}
## Custom block element  

Here's an example of a block with custom 
formatting. Everything in this block has 
this format.
:::
```
:::

:::{.column width="50%"}

### Output  

:::{.small}
:::{.fragment}

Here's a paragraph. To separate it from the next paragraph,
you need to add one or more empty lines.

This is a new paragraph. You can format each paragraph independently. 
A paragraph is an examine of a block element.

::: {.callout-tip}
## Custom block element

Here's an example of a block with custom formatting. Everything in this block has this format.
:::

:::
:::

:::
:::


::: {.notes}

:::


## Block elements: [Headers]{.gray-bold} 

\

+---------------------+-----------------------------------+
| Markdown Syntax     | Output                            |
+=====================+===================================+
|     # Header 1      | # Header 1 {.heading-output}      |
+---------------------+-----------------------------------+
|     ## Header 2     | ## Header 2 {.heading-output}     |
+---------------------+-----------------------------------+
|     ### Header 3    | ### Header 3 {.heading-output}    |
+---------------------+-----------------------------------+
|     #### Header 4   | #### Header 4 {.heading-output}   |
+---------------------+-----------------------------------+


## Block elements: [Lists]{.gray-bold}

\

::: columns

::: {.column width="50%"}
### Markdown 

```{.markdown}
**Ordered List**

1. This item first
2. Then this one
3. And finally this
```

\ 

::: {.fragment fragment-index=2}
```{.markdown}
**Unordered List**

- Kodiak Refuge
- Togiak Refuge
- Arctic Refuge
```
:::

:::

::: {.column width="50%"}

### Output

::: {.small}
::: {.fragment fragment-index=1}
**Ordered List**

1. This item first
2. Then this one
3. And finally this
:::

::: {.fragment fragment-index=3}
**Unordered List**

- Kodiak Refuge
- Togiak Refuge
- Arctic Refuge
:::
:::

:::

:::

::: {.notes}

:::


## Block elements: [Math]{.gray-bold}

\
 
::: columns

::: {.column width="50%"}

### Markdown  
```{.markdown}
The Cauchy-Schwarz Inequality

$$
\left( \sum_{k=1}^n a_k b_k \right)^2 
\leq 
\left( \sum_{k=1}^n a_k^2 \right) 
\left( \sum_{k=1}^n b_k^2 \right)
$$
is an upper bound on the inner product between  
two vectors in an inner product space in terms  
of the product of the vector norms.
```
:::

::: {.column width="50%"}

### Output  

:::{.fragment}
::: {.small}
The Cauchy-Schwarz Inequality

$$
\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)
$$
is an upper bound on the inner product between two vectors in an inner product space in terms of the product of the vector norms.
:::
:::

:::

:::

::: {.notes}

:::


## Block elements: [Images]{.gray-bold}

\

::: columns

::: {.column width="50%"}
### Markdown
```{.markdown}
Here's a paragraph of text. We describe
something of great importance. So great,
in fact, that we need to also include an image. 

![](images/bear_singing.png)

Moving along, we will describe something else. 
```
:::

::: {.column width="50%"}
### Output
::: {.small .fragment}
Here's a paragraph of text. We describe  
something of great importance. So great,  
in fact, that we need to also include an image. 

![](images/bear_singing.png){width="30%"}

Moving along, we will describe something else. 
:::
:::

:::

::: {.notes}

:::


# Exercise 3: [Document body](exercises.qmd#sec-exercise2) {.exercise}

\
\
\

```{r}
countdown::countdown(10, bottom = 0)
```

::: {.notes}

:::


## Code chunks: [Pandoc]{.gray-bold}

::: columns

::: {.column width="50%"}  
````markdown
```language
Some code here
```
````
:::

::: {.column width="50%"}
:::{.small .incremental}
- Code chunk surrounded by a "fence" of three backticks ` ``` `
- Specifying the language allows for syntax highlighting.
- Code is displayed but not executed
:::
:::

:::

::: {.notes}

:::


## Code chunks: [R Markdown]{.gray-bold} {auto-animate="true"}

::: columns

::: {.column width="50%"}
    ```{{r, echo=FALSE}}
    Some code here
    ```
:::

::: {.column width="50%"}
::: {.small}
- Code chunk surrounded by a "fence" of three backticks ` ``` `  
- Specifying the language allows for syntax highlighting.
- ~~Code is displayed but not executed~~ Code executes unless you specify as an option -> brackets`{}`
- Chunk options are a comma-seperated list (R syntax)
:::
:::

:::

::: {.notes}

:::


## Code chunks: [Quarto]{.gray-bold} {auto-animate="true"}

::: columns

::: {.column width="50%"}
    ```{{language}}
    #| echo: false
    
    Some code here
    ```
:::

::: {.column width="50%"}
::: {.small}
- Code chunk surrounded by a "fence" of three backticks ` ``` `
- Specifying the language allows for syntax highlighting.
- ~~Code is displayed but not executed~~ Code executes unless you specify as an option -> brackets`{}`
- ~~Chunk options are a comma-seperated list (R syntax)~~ Chunk options moved to a YAML in the cell after a hash pipe `#|`
    + Wider language support
    + Easier to read
:::
:::

:::

::: {.notes}

:::


## Code chunks: [Labels]{.gray-bold} {auto-animate="true"}

\

::: columns

::: {.column width="50%"}
- Identifies code chunks
    - Makes debugging easier
    - Can reference code chunk outputs in the text
:::

::: {.column width="50%" .fragment}
\

```{{r}}
label: summary-plot

Some code to generate a plot...
```
:::

:::

\

::: {.fragment}
:::{.callout-tip title="Avoid using underscores (_) in labels and IDs."}
This can cause problems when rendering to PDF with LaTeX. {{< fa face-smile-wink >}}
:::
:::

::: {.notes}

:::


## Execution options: [Outputs]{.gray-bold}

\

::: {.small}
| Option    | Description                                                                                                                                                                                       |
|-----------|------------------------------------------------------------|
| `eval`    | Evaluate the code chunk (if `false`, just echos the code into the output).                                                                                                                        |
| `echo`    | Include the source code in output                                                                                                                                                                 |
| `output`  | Include the results of executing the code in the output (`true`, `false`, or `asis` to indicate that the output is raw markdown and should not have any of Quarto's standard enclosing markdown).  |
| `warning` | Include warnings in the output.                                                                                                                                                                   |
| `error`   | Include errors in the output.                                                                                                                                                                     |
| `include` | Catch all for preventing any output (code or results) from being included (e.g. `include: false` suppresses all output from the code block).                                                  |
:::

\

:::{.fragment}
::: {.callout-tip title="Tab Completion is your friend!"}

:::
:::


## Execution options: [Figures]{.gray-bold} {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{{r}}
library(ggplot2)

ggplot(iris, aes(x = Petal.Width, 
                 y = Petal.Length)) +
  geom_point() +
  labs(x = "Petal width",
       y = "Petal length")
```
:::

::: {.column width="50%" .fragment}
```{r}
#| echo: true

library(ggplot2)

ggplot(iris, aes(x = Petal.Width, 
                 y = Petal.Length)) +
  geom_point() +
  labs(x = "Petal width",
       y = "Petal length")
```
:::
:::


::: {.notes}

:::


## Execution options: [Figures]{.gray-bold} {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{{r}}
#| echo: false

library(ggplot2)

ggplot(iris, aes(x = Petal.Width, 
                 y = Petal.Length)) +
  geom_point() +
  labs(x = "Petal width",
       y = "Petal length")
```
:::

::: {.column width="50%" .fragment}
```{r}
#| echo: false

library(ggplot2)

ggplot(iris, aes(x = Petal.Width, 
                 y = Petal.Length)) +
  geom_point() +
  labs(x = "Petal width",
       y = "Petal length")
```
:::
:::


::: {.notes}

:::


## Execution options: [Figures]{.gray-bold} {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{{r}}
#| echo: false
#| fig-width: 3
#| fig-height: 2

library(ggplot2)

ggplot(iris, aes(x = Petal.Width, 
                 y = Petal.Length)) +
  geom_point() +
  labs(x = "Petal width",
       y = "Petal length")

```
:::

::: {.column width="50%" .fragment}
```{r}
#| echo: false
#| fig-width: 3
#| fig-height: 2

library(ggplot2)

ggplot(iris, aes(x = Petal.Width, 
                 y = Petal.Length)) +
  geom_point() +
  labs(x = "Petal width",
       y = "Petal length")

```
:::
:::


::: {.notes}
:::


## Execution options: [Figures]{.gray-bold} {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{{r}}
#| echo: false
#| fig-width: 5
#| fig-height: 5

library(ggplot2)

ggplot(iris, aes(x = Petal.Width, 
                 y = Petal.Length)) +
  geom_point() +
  labs(x = "Petal width",
       y = "Petal length")
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig-width: 5
#| fig-height: 5

library(ggplot2)

ggplot(iris, aes(x = Petal.Width, 
                 y = Petal.Length)) +
  geom_point() +
  labs(x = "Petal width",
       y = "Petal length")

```
:::
:::


::: {.notes}

:::


## Execution options: [Figures]{.gray-bold} {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{{r}}
#| echo: false
#| fig-width: 5
#| fig-height: 5
#| fig-cap: "This is my really neat plot."

library(ggplot2)

ggplot(iris, aes(x = Petal.Width, 
                 y = Petal.Length)) +
  geom_point() +
  labs(x = "Petal width",
       y = "Petal length")

```
:::

::: {.column width="50%" .fragment}
```{r}
#| echo: false
#| fig-width: 5
#| fig-height: 5
#| fig-cap: "This is my really neat plot."

library(ggplot2)

ggplot(iris, aes(x = Petal.Width, 
                 y = Petal.Length)) +
  geom_point() +
  labs(x = "Petal width",
       y = "Petal length")

```
:::
:::

::: {.notes}

:::


## Execution options: [YAML]{.gray-bold} {auto-animate="true"}

\

::: columns

::: {.column width="60%"}
::: {.callout-tip title="Execution options at the document level in the YAML
"}
Avoids having to reapply options for each code chunk! {{< fa thumbs-up >}}
:::
:::

::: {.column width="40%" .fragment}
```yaml
---
title: "My FWS Report"
author: Jane Biologist
format: html
---
```
:::

:::

:::{.notes}

:::


## Execution options: [YAML]{.gray-bold} {auto-animate="true"}

\

::: columns

::: {.column width="60%"}
::: {.callout-tip title="Execution options at the document level in the YAML
"}
Avoids having to reapply options for each code chunk! {{< fa thumbs-up >}}
:::
:::

::: {.column width="40%"}
```yaml
---
title: "My FWS Report"
author: Jane Biologist
format:
  html:
    fig-width: 5
    fig-height: 5
execute:
  echo: false
---
```
:::

:::

:::{.notes}

:::


## Exercise 4: Code chunks {.exercise}
\
Open `4_code_chunks.qmd` and make the following changes to the rendered document:  
\

::: {.small}
- [ ] Label the plot code chunk to help you differentiate from other chunks.
- [ ] Update the figure caption to read "Mean monthly Western..."
- [ ] Add `+ theme_classic()` to end of ggplot script to clean up plot. Re-render.
- [ ] Remove the output of a code chunk. Change `include` option to `false` and re-render.
:::

```{r}
countdown::countdown(10)
```


## Exercise 5: Your turn! {.exercise}

::: {.small}
- [ ] Create a new Quarto document
- [ ] Add this.. 
- [ ] and..
- [ ] this...
- [ ] and..
- [ ] this.
:::

```{r}
countdown::countdown(10)
```


## Wrap up

::: columns

::: {.column width="50%"}
![](images/quarto_space.png){width=700 fig-alt="A Quarto spaceship launching into space with documents and reports floating around it."}
:::

::: {.column width="50%"}
- Quarto is a powerful tool for creating scientific documents, presentations, and websites.
- Three basic components of a Quarto file control the rendered output:
    - YAML metadata
    - Text body
    - Code chunks
- Once you understand the basics,  the sky's the limit!
:::

:::

## {.center background-image="images/plover_question.png" background-size="contain"}

