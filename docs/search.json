[
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Quarto References",
    "section": "",
    "text": "Getting Started with Quarto\n\nTutorial: Hello, Quarto\n\nQuarto chapter in “R for Data Science”\n\nGetting Started With Quarto (video)\nIntroduction to Quarto, Klajdi Puka\n\nIntroduction to Working with Quarto documents, Carpentries Incubator\n\nGallery of Quarto report examples\n\n\n\nAutomating Quarto Reports\n\nHow to automate your reporting with Quarto Dashboards and Posit Connect (video)\n\nQuarto: Elevating R Markdown for Advanced Publishing (video)\n\n\n\nQuarto Websites and Dashboard\n\nCreating a website using Quarto\n\nCreating your personal website using Quarto\n\nQuarto Dashboards (video)\n\nGallery of Quarto website examples\n\nGallery of Quarto dashboard examples"
  },
  {
    "objectID": "materials/presentations/slides.html#outline",
    "href": "materials/presentations/slides.html#outline",
    "title": "Introduction\nto Quarto",
    "section": "Outline",
    "text": "Outline\n\n\nIntroduce Revealjs presentations using Quarto\nDescribe YAML options for presentations\nDescribe markdown syntax for creating slides\nIntroduce themes and describe how to customize themes using a SCSS file\nIntroduce advanced features to further customize the look and feel of presentation slides"
  },
  {
    "objectID": "materials/presentations/slides.html#presentation-formats",
    "href": "materials/presentations/slides.html#presentation-formats",
    "title": "Introduction\nto Quarto",
    "section": "Presentation formats",
    "text": "Presentation formats"
  },
  {
    "objectID": "materials/presentations/slides.html#revealjs-format",
    "href": "materials/presentations/slides.html#revealjs-format",
    "title": "Introduction\nto Quarto",
    "section": "Revealjs format",
    "text": "Revealjs format\n\n\n\nAn open source HTML presentation framework\nChange styles with CSS/SCSS\nCustomize with JavaScript\nMarkdown and LateX support\n\n\n\n\n\n\n\nAn open source HTML presentation framework\nChange styles with CSS/SCSS\nCustomize with JavaScript\nMarkdown and LateX support"
  },
  {
    "objectID": "materials/1-overview/slides.html#section",
    "href": "materials/1-overview/slides.html#section",
    "title": "Introduction\nto Quarto",
    "section": "",
    "text": "Course materials can be found at:\nhttps://github.com/USFWS/intro-to-quarto .\n\n\nYou can find the course materials at the website listed here."
  },
  {
    "objectID": "materials/1-overview/slides.html#outline",
    "href": "materials/1-overview/slides.html#outline",
    "title": "Introduction\nto Quarto",
    "section": "Outline",
    "text": "Outline\n\nOverview of Quarto\nComponents of a Quarto document\n\nYAML metadata\nDocument body\nCode blocks\n\n\n\n\nThis workshop serves as an introduction to using Quarto to create reports.\nDuring our time here, we will provide a brief overview of what Quarto is, what it can do for you, and how it compares to R Markdown. We will then dive into the anatomy of a Quarto file, which can be broken into three primary components: the YAML metadata, the document body, and code blocks (or code “chunks”).\nThe workshop is a series of short presentations followed by hand-on exercises to practice what you’ve learned.\nWe will be available to provide help during the exercises, so let us know by raising your hand (in person or virtually!)"
  },
  {
    "objectID": "materials/1-overview/slides.html#outputs-documents",
    "href": "materials/1-overview/slides.html#outputs-documents",
    "title": "Introduction\nto Quarto",
    "section": "Outputs: Documents",
    "text": "Outputs: Documents\n\nDownload PDF file.\n\n\n\nQuarto can produce high quality documents in HTML, PDF or MS Word\nHas the ability to output content using standardized templates, as shown here for a refuge report."
  },
  {
    "objectID": "materials/1-overview/slides.html#output-websites",
    "href": "materials/1-overview/slides.html#output-websites",
    "title": "Introduction\nto Quarto",
    "section": "Output: Websites",
    "text": "Output: Websites\n\n\n\nQuarto can also create websites, such as this Science Applications Metadata Guidance.\nThe course website that we are using today was created in Quarto."
  },
  {
    "objectID": "materials/1-overview/slides.html#outputs-presentations",
    "href": "materials/1-overview/slides.html#outputs-presentations",
    "title": "Introduction\nto Quarto",
    "section": "Outputs: Presentations",
    "text": "Outputs: Presentations\n\n\n\nQuarto can also output professional-looking presentations as HTML-based Revealjs presentations or as PowerPoint. Templates are available online or with a little CSS code, you can create your own."
  },
  {
    "objectID": "materials/1-overview/slides.html#outputs-books",
    "href": "materials/1-overview/slides.html#outputs-books",
    "title": "Introduction\nto Quarto",
    "section": "Outputs: Books",
    "text": "Outputs: Books\n\n\nFinally, it’s possible to write books using Quarto, such as the R for Data Science book shown here.\n\nTo summarize, Quarto is an open-source scientific and technical publishing system.\nInstead of writing a report or presentation in Word, PowerPoint, etc.; then running code in an R script; then saving output and visualizations; and then pasting them in the report or the presentation\nWe can do it all in Quarto, a free system especially tailored to scientific and technical publishing."
  },
  {
    "objectID": "materials/1-overview/slides.html#quarto-and-r-markdown",
    "href": "materials/1-overview/slides.html#quarto-and-r-markdown",
    "title": "Introduction\nto Quarto",
    "section": "Quarto and R Markdown",
    "text": "Quarto and R Markdown\n\n\n\n\n\nHow does it work? If you are familiar with R Markdown, you are probably familiar with this pipeline.\nYou start out with an R Markdown document, which includes text and R code."
  },
  {
    "objectID": "materials/1-overview/slides.html#quarto-and-r-markdown-1",
    "href": "materials/1-overview/slides.html#quarto-and-r-markdown-1",
    "title": "Introduction\nto Quarto",
    "section": "Quarto and R Markdown",
    "text": "Quarto and R Markdown\n\n\n\nWhen you knit an R Markdown file, a R package “knitr” calls the engine knitr to execute your R code, and create an Markdown file that include and then uses Pandoc to produce whatever output you’ve specified."
  },
  {
    "objectID": "materials/1-overview/slides.html#quarto-and-r-markdown-2",
    "href": "materials/1-overview/slides.html#quarto-and-r-markdown-2",
    "title": "Introduction\nto Quarto",
    "section": "Quarto and R Markdown",
    "text": "Quarto and R Markdown"
  },
  {
    "objectID": "materials/1-overview/slides.html#quarto-and-r-markdown-3",
    "href": "materials/1-overview/slides.html#quarto-and-r-markdown-3",
    "title": "Introduction\nto Quarto",
    "section": "Quarto and R Markdown",
    "text": "Quarto and R Markdown\n\n\n\n\n\nA Quarto .qmd file on the other hand can be composed of text and R, Python, and/or Julia code."
  },
  {
    "objectID": "materials/1-overview/slides.html#quarto-and-r-markdown-4",
    "href": "materials/1-overview/slides.html#quarto-and-r-markdown-4",
    "title": "Introduction\nto Quarto",
    "section": "Quarto and R Markdown",
    "text": "Quarto and R Markdown\n\n\n\nEither the knitr or jupyter engines will then render your text and code into a Markdown file followed by Pandoc producing whatever output you’ve specified. Quarto accomplishes this by being fully separate from the R ecosystem. You can even run it from the command-line interface (i.e., the shell or terminal), if you want to."
  },
  {
    "objectID": "materials/1-overview/slides.html#quarto-and-r-markdown-5",
    "href": "materials/1-overview/slides.html#quarto-and-r-markdown-5",
    "title": "Introduction\nto Quarto",
    "section": "Quarto and R Markdown",
    "text": "Quarto and R Markdown\n\n\n\nEmbedding code and output from Python, R, and JavaScript via integration with Jupyter, Knitr, and Observable.\nA variety of extensions to Pandoc markdown useful for technical writing including cross-references, sub-figures, layout panels, hoverable citations and footnotes, callouts, and more.\nA project system for rendering groups of documents at once, sharing options across documents, and producing aggregate output like websites and books.\nAuthoring using a wide variety of editors and notebooks including JupyterLab, RStudio, and VS Code.\nA visual markdown editor that provides a productive writing interface for composing long-form documents."
  },
  {
    "objectID": "materials/1-overview/slides.html#when-to-use-quarto-and-r-markdown",
    "href": "materials/1-overview/slides.html#when-to-use-quarto-and-r-markdown",
    "title": "Introduction\nto Quarto",
    "section": "When to use Quarto and R Markdown?",
    "text": "When to use Quarto and R Markdown?\n\n\n\n\n\n\nWeave together text, plots, tables, and statistics\nFrequently re-create a standardized document\nReproduce your analyses\nGenerate comparable reports across multiple parameters (species, watershed, state)"
  },
  {
    "objectID": "materials/1-overview/slides.html#section-1",
    "href": "materials/1-overview/slides.html#section-1",
    "title": "Introduction\nto Quarto",
    "section": "",
    "text": "You’re at a crossroads! How do you decide whether to move from R Markdown to Quarto?"
  },
  {
    "objectID": "materials/1-overview/slides.html#advantage-of-r-markdown",
    "href": "materials/1-overview/slides.html#advantage-of-r-markdown",
    "title": "Introduction\nto Quarto",
    "section": "Advantage of R Markdown",
    "text": "Advantage of R Markdown\n\n\n\n\n\nHave existing R Markdown code that works for you\nCustom tools built around R Markdown that are not yet available in Quarto\n\n\n\n\n\n\n\n\n\n\n\nIf you like using R Markdown, there’s no need to switch! R Markdown will continue to be supported and work as it always has been. You’re welcome to try Quarto if you like, but there’s no need to switch.\nIf you have a R Markdown file that includes custom tools, there is a chance that they might not yet in available in Quarto. If this is the case, you’re of course welcome to stick with R Markdown. As they say, if it ain’t broke, don’t fix it."
  },
  {
    "objectID": "materials/1-overview/slides.html#advantages-of-quarto",
    "href": "materials/1-overview/slides.html#advantages-of-quarto",
    "title": "Introduction\nto Quarto",
    "section": "Advantages of Quarto",
    "text": "Advantages of Quarto\n\n\n\n\nNo requirement for R\nFewer package dependencies\nrevealjs slides are easier to work with\nBetter cross referencing of figures, tables, and citations\nQuarto extensions allow for easier customization\nQuarto projects make it easier to customize websites and collaborate\nThe future\n\n\n\n\n\n\n\n\nThat said, there are a number of advantage to using Quarto, including:\n\nNo requirement for R (multilingual)\n\nR, Python, Julia, Javascript\n\nMore streamline and less R package dependencies\n\nUse revealjs directly for pretty slides, rather than relying on R packages.\n\nCross referencing tables and tables in the text is more straightforward, as is inserting and managing citations.\nA growing number of Quarto extensions add functionality\n\nAllow you use customized templates and\n\nQuarto projects\n\nEasier to create websites, books, collaborate on projects, etc.\n\nMost active development has moved from R Markdown to Quarto. It will only get better with time."
  },
  {
    "objectID": "materials/1-overview/slides.html#three-ways-to-render-quarto",
    "href": "materials/1-overview/slides.html#three-ways-to-render-quarto",
    "title": "Introduction\nto Quarto",
    "section": "Three ways to render Quarto",
    "text": "Three ways to render Quarto\n\n\n\n\n\n\n1.\nRStudio GUI \n\n\n\n\n2.\nQuarto command line interface (CLI) \n\n\n\n\n3.\nQuarto R package\n\nquarto::quarto_render(input = ___, \n                      output_format = ___)"
  },
  {
    "objectID": "materials/1-overview/slides.html#authoring-source-and-visual-panes",
    "href": "materials/1-overview/slides.html#authoring-source-and-visual-panes",
    "title": "Introduction\nto Quarto",
    "section": "Authoring: Source and Visual panes",
    "text": "Authoring: Source and Visual panes"
  },
  {
    "objectID": "materials/1-overview/slides.html#exercise-1-rendering",
    "href": "materials/1-overview/slides.html#exercise-1-rendering",
    "title": "Introduction\nto Quarto",
    "section": "Exercise 1: Rendering",
    "text": "Exercise 1: Rendering\n\n\n\n−+\n10:00"
  },
  {
    "objectID": "materials/1-overview/slides.html#yaml-header",
    "href": "materials/1-overview/slides.html#yaml-header",
    "title": "Introduction\nto Quarto",
    "section": "YAML header",
    "text": "YAML header\nYet Another Markup Language = document metadata!\n\n\n\n\n---\ntitle: \"Introduction to Quarto\"\nauthor: \"FWS staff\"\nformat: \n  revealjs:\n    theme: [default, refuge_light.scss]\n    subtitle: \"Overview\"\n    height: 900\n    width: 1600\neditor: source\n---\n\n\n\n\nStarts and ends with “---”\nUses key-value pairs: key: value\n\nPicky about spacing and indentations!\n\nProcessed during rendering\nIncluding options for:\n\nTitle, authors, date\nFile output(s) (e.g., html, docx)\nStyling (e.g., theme, fig-width)\nParameters"
  },
  {
    "objectID": "materials/1-overview/slides.html#yaml-header-options",
    "href": "materials/1-overview/slides.html#yaml-header-options",
    "title": "Introduction\nto Quarto",
    "section": "YAML header: Options",
    "text": "YAML header: Options\n\n\nOptions are dependent on the file output (many options )\n\nSearch the Quarto guidance within your specified file format:"
  },
  {
    "objectID": "materials/1-overview/slides.html#yaml-header-options-1",
    "href": "materials/1-overview/slides.html#yaml-header-options-1",
    "title": "Introduction\nto Quarto",
    "section": "YAML header: Options",
    "text": "YAML header: Options\n\n\n\n\n\n\n\n\nAnother option: Use your friendly assistant!\n\n\n\nStart a word and hit tab to complete or …\nType Ctrl+space to see available options."
  },
  {
    "objectID": "materials/1-overview/slides.html#exercise-2-yaml-metadata",
    "href": "materials/1-overview/slides.html#exercise-2-yaml-metadata",
    "title": "Introduction\nto Quarto",
    "section": "Exercise 2: YAML metadata",
    "text": "Exercise 2: YAML metadata\n\n\n\n\n\n−+\n10:00"
  },
  {
    "objectID": "materials/1-overview/slides.html#text-body-markdown",
    "href": "materials/1-overview/slides.html#text-body-markdown",
    "title": "Introduction\nto Quarto",
    "section": "Text body: Markdown",
    "text": "Text body: Markdown\n\n\n\n\n\nMarkdown is a markup language (e.g., HTML, teX, XML)\n\nAdd syntax to the text to change it’s look\nMix text with markup instructions\n\nQuarto uses Pandoc Markdown\n\nInline or block elements\n\n\n\n\n\n\nNow we are going to get into the body of our Quarto file\nEverything in the body, aside from our code, which we will get to later, is written in the language Markdown\n\nAllows us to write our text and do our styling in a machine-readable fashion\nLuckily, it is pretty human-readable as well\n\nEssentially, it is how we make our document pretty\nQuarto uses Pandoc Markdown, which is very similar to but a little different from standard Markdown\n\nOne of the key features of Pandoc Markdown\nAllows us to style inline elements without impacting surrounding text or other elements\nOR style whole blocks of the document at once\nAnd I’ll show you what I mean by this in a second\n\nWe view our Quarto file in Markdown language when we use the “Source Editor”\n\nAnd I’ll be walking through Quarto’s Markdown syntax\nHowever, it’s important to acknowledge that you can do the same things in the “Visual Editor” by highlighting things and clicking buttons much like you would when formatting your document in Microsoft word\nBoth are acceptable, and you can toggle between them, but it’s always good to know the markdown because it gives you a little bit more control and can be really beneficial if your formatting gets wonky in the visual mode"
  },
  {
    "objectID": "materials/1-overview/slides.html#text-body",
    "href": "materials/1-overview/slides.html#text-body",
    "title": "Introduction\nto Quarto",
    "section": "Text body",
    "text": "Text body\n\n\nInline elements\n\nIndividual words in a sentence\nImages, links, equations, or code in a sentence\n\n\nBlock elements\n\nParagraphs or sections of a document\nStandalone images, equations, or figures\n\n\n\n\n\nIf we want to style (such as italicizing) certain words within a sentence or paragraph, this would be inline styling\nAside from text, we can also include and style images, hyperlinks, equations, and code inline"
  },
  {
    "objectID": "materials/1-overview/slides.html#inline-elements-text",
    "href": "materials/1-overview/slides.html#inline-elements-text",
    "title": "Introduction\nto Quarto",
    "section": "Inline elements: Text",
    "text": "Inline elements: Text\n\n\n\n\nMarkdown\n\n\nThis is an example of how you could change    \ninline elements of text body Markdown in a FWS  \nreport. You can make a word *italicized* or  \n**bold**. You can also display code, such as \n`exp(10) + 1`. You can even ~~strikethrough~~  \nand make something a superscript^1^.\n\nOutput\n\n\nThis is an example of how you could change\ninline elements of text body Markdown in a FWS report. You can make a word italicized or\nbold. You can also display code, such as\nexp(10) + 1. You can even strikethrough\nand make something a superscript1.\n\n\n\n\n\n\nHere’s an example showing a lot of the different options for customizing your text through inline changes\nYou can use ___ for ___, …\n\nAsterix, double asterix, backtick, double tilde, caret\nYou can also have inline code that is actually executed, but that’s getting outside of markdown language and styling, so we’ll come back to that later\nEssentially you will add characters to denote certain types of styling and you want to place them at both the beginning and the end so that the computer knows where to start and stop the styling"
  },
  {
    "objectID": "materials/1-overview/slides.html#inline-elements-math",
    "href": "materials/1-overview/slides.html#inline-elements-math",
    "title": "Introduction\nto Quarto",
    "section": "Inline elements: Math",
    "text": "Inline elements: Math\nwith LaTex!\n\n\nMarkdown\nThe solution to $sqrt(x) = 26$ is $x = 676$ and  \n$\\pi = 3.1415...$.\n\nOutput\n\n\nThe solution to \\(sqrt(x) = 26\\) is \\(x = 676\\) and \\(\\pi = 3.1415...\\).\n\n\n\n\n\n\nTo make your equations look nice, you can use LaTex, which is coded using the dollar sign"
  },
  {
    "objectID": "materials/1-overview/slides.html#inline-elements-hyperlinks-and-images",
    "href": "materials/1-overview/slides.html#inline-elements-hyperlinks-and-images",
    "title": "Introduction\nto Quarto",
    "section": "Inline elements: Hyperlinks and images",
    "text": "Inline elements: Hyperlinks and images\n\n\n\n\nMarkdown\nFor more information on how to use Quarto,  \ncheck out the [Quarto webpage](www.quarto.com).\n\n\n\nHere's an image that is inline with  \nmy text ![](images/favicon.png).\n\n\nOutput\n\n\nFor more information on how to use Quarto,\ncheck out the Quarto webpage.\n\n\n\n\nHere’s an image that is inline with\nmy text .\n\n\n\n\n\n\nHyperlinks use square brackets for the display text, immediately followed by the URL in parentheses\n\nSo, “Quarto Webpage” is now a clickable link\n\nImages are similar, but require an exclamation mark at the beginning\n\nAdding text in the square brackets is optional if you want to add alt text, but it will not display\nIn parentheses, we provide the path to the file"
  },
  {
    "objectID": "materials/1-overview/slides.html#block-elements-paragraphs",
    "href": "materials/1-overview/slides.html#block-elements-paragraphs",
    "title": "Introduction\nto Quarto",
    "section": "Block elements: Paragraphs",
    "text": "Block elements: Paragraphs\n\n\nMarkdown\nHere's a paragraph. To separate it from the next  \nparagraph, you need to add one or more empty lines.\n\nThis is a new paragraph. You can format each  \nparagraph independently. A paragraph is an  \nexamine  of a block element.\n\n::: {.callout-tip}\n## Custom block element  \n\nHere's an example of a block with custom \nformatting. Everything in this block has \nthis format.\n:::\n\nOutput\n\n\nHere’s a paragraph. To separate it from the next paragraph, you need to add one or more empty lines.\nThis is a new paragraph. You can format each paragraph independently. A paragraph is an examine of a block element.\n\n\n\n\n\n\nCustom block element\n\n\nHere’s an example of a block with custom formatting. Everything in this block has this format.\n\n\n\n\n\n\n\n\n\nSpacing is really important in Markdown language\nCreating paragraphs is super easy, you just need to remember to insert empty space between your blocks\nTo style a block of text (could be one paragraph, could be multiple), enclose them in triple colons to define the section, and provide styling information in curly braces\nWe’re not going to go deep into this, but if you have a custom styling scss file, you could apply a class you’ve defined to this block here\n\nIn this example, we format this block as a callout block\nThese callouts are just a built-in feature of Quarto\n\nThere are 5 types of callouts (note, tip, warning, caution, and important) – this example is a tip\nAnd they all have their own color and icon\nWhen we add a header to the block, quarto knows to make that text the banner in the callout\n\n\nIn general, nesting styling is also possible. You can create blocks within blocks"
  },
  {
    "objectID": "materials/1-overview/slides.html#block-elements-headers",
    "href": "materials/1-overview/slides.html#block-elements-headers",
    "title": "Introduction\nto Quarto",
    "section": "Block elements: Headers",
    "text": "Block elements: Headers\n\n\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n# Header 1\nHeader 1\n\n\n## Header 2\nHeader 2\n\n\n### Header 3\nHeader 3\n\n\n#### Header 4\nHeader 4\n\n\n\n\n\nHeaders are similar to headers in Word where there are different levels corresponding to text size and boldness\nThe header level is indicated by the number of hashtags you use\n\nSo if you use 1 hashtag, it is a level 1 header, and so on"
  },
  {
    "objectID": "materials/1-overview/slides.html#block-elements-lists",
    "href": "materials/1-overview/slides.html#block-elements-lists",
    "title": "Introduction\nto Quarto",
    "section": "Block elements: Lists",
    "text": "Block elements: Lists\n\n\n\n\nMarkdown\n**Ordered List**\n\n1. This item first\n2. Then this one\n3. And finally this\n \n\n**Unordered List**\n\n- Kodiak Refuge\n- Togiak Refuge\n- Arctic Refuge\n\n\nOutput\n\n\nOrdered List\n\nThis item first\nThen this one\nAnd finally this\n\n\n\nUnordered List\n\nKodiak Refuge\nTogiak Refuge\nArctic Refuge\n\n\n\n\n\n\n\nLists are pretty straightforward\n\nA numbered list is made exactly how you would expect it to be\nStandard bullet points are indicated with dashes\n\nYou just want to be careful of spacing and choice of characters here"
  },
  {
    "objectID": "materials/1-overview/slides.html#block-elements-math",
    "href": "materials/1-overview/slides.html#block-elements-math",
    "title": "Introduction\nto Quarto",
    "section": "Block elements: Math",
    "text": "Block elements: Math\nwith LaTex!\n\n\nMarkdown\nThe Cauchy-Schwarz Inequality\n\n$$\n\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \n\\leq \n\\left( \\sum_{k=1}^n a_k^2 \\right) \n\\left( \\sum_{k=1}^n b_k^2 \\right)\n$$\nis an upper bound on the inner product between  \ntwo vectors in an inner product space in terms  \nof the product of the vector norms.\n\nOutput\n\n\nThe Cauchy-Schwarz Inequality\n\\[\n\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)\n\\] is an upper bound on the inner product between two vectors in an inner product space in terms of the product of the vector norms.\n\n\n\n\n\n\nTo write out more substantial equations, you do the same thing as before, but use double dollar signs to enclose the LaTex block\nEverything within the block is actually not Markdown\n\nIt’s LaTex code, which is another markup language\nSo to know how to write out these equations, you’ll want to Google a LaTex guide"
  },
  {
    "objectID": "materials/1-overview/slides.html#block-elements-images",
    "href": "materials/1-overview/slides.html#block-elements-images",
    "title": "Introduction\nto Quarto",
    "section": "Block elements: Images",
    "text": "Block elements: Images\n\n\n\n\nMarkdown\nHere's a paragraph of text. We describe\nsomething of great importance. So great,\nin fact, that we need to also include an image. \n\n![](images/bear_singing.png)\n\nMoving along, we will describe something else. \n\nOutput\n\nHere’s a paragraph of text. We describe\nsomething of great importance. So great,\nin fact, that we need to also include an image.\n\nMoving along, we will describe something else.\n\n\n\n\n\nTo add an image on its own line, it is exactly the same as before\nJust add empty lines before and after to make it clear that the image should be treated as its own block"
  },
  {
    "objectID": "materials/1-overview/slides.html#exercise-3-document-body",
    "href": "materials/1-overview/slides.html#exercise-3-document-body",
    "title": "Introduction\nto Quarto",
    "section": "Exercise 3: Document body",
    "text": "Exercise 3: Document body\n\nOpen 3-document_body.qmd and make the following changes to the document:\n\nInline:\n\nItalicize the species name\nMake the refuge name into a hyperlink to the refuge website\n\nBlock:\n\nCreate a new header named “My list”\nMake an ordered and unordered list\nInsert an image of the western snow plover below the “U.S. Fish and Wildlife Service” header\n\nHint: image can be found in the images folder\n\n\n\n\n\n\n−+\n10:00"
  },
  {
    "objectID": "materials/1-overview/slides.html#code-chunks-pandoc",
    "href": "materials/1-overview/slides.html#code-chunks-pandoc",
    "title": "Introduction\nto Quarto",
    "section": "Code chunks: Pandoc",
    "text": "Code chunks: Pandoc\n\n\n```language\nSome code here\n```\n\n\n\nCode chunk surrounded by a “fence” of three backticks ```\nSpecifying the language allows for syntax highlighting.\nCode is displayed but not executed\n\n\n\n\n\nIn this section, we’ll delve into one of the final elements of a Quarto document: inline code and code blocks, commonly known as code chunks.\nThese components enable us to seamlessly integrate data analyses, visualizations, and computations right within the Quarto document, enhancing the interactive experience and improving reproducibility.\nLet’s break down the structure of a code chunk and walk through its processing:\nCode chunks are defined by enclosing the code within three backticks (```). This notation signals to Pandoc that the content between these backticks is code and should not be treated as regular text.\nFollowing the initial three backticks, we indicate the programming language of the code. This helps Pandoc understand how to interpret the code."
  },
  {
    "objectID": "materials/1-overview/slides.html#code-chunks-r-markdown",
    "href": "materials/1-overview/slides.html#code-chunks-r-markdown",
    "title": "Introduction\nto Quarto",
    "section": "Code chunks: R Markdown",
    "text": "Code chunks: R Markdown\n\n\n```{r, echo=FALSE}\nSome code here\n```\n\n\n\nCode chunk surrounded by a “fence” of three backticks ```\n\nSpecifying the language allows for syntax highlighting.\nCode is displayed but not executed Code executes unless you specify as an option -&gt; brackets{}\nChunk options are a comma-separated list (R syntax)\n\n\n\n\n\nThe language specification must be enclosed in curly brackets to denote which programming language is being used for execution.\nFor those of you familiar with RMarkdown, you might recall that code chunk options were traditionally included in the curly brackets after specifying the r language, using commas to separate each option."
  },
  {
    "objectID": "materials/1-overview/slides.html#code-chunks-quarto",
    "href": "materials/1-overview/slides.html#code-chunks-quarto",
    "title": "Introduction\nto Quarto",
    "section": "Code chunks: Quarto",
    "text": "Code chunks: Quarto\n\n\n```{language}\n#| echo: false\n\nSome code here\n```\n\n\n\nCode chunk surrounded by a “fence” of three backticks ```\nSpecifying the language allows for syntax highlighting.\nCode is displayed but not executed Code executes unless you specify as an option -&gt; brackets{}\nChunk options are a comma-seperated list (R syntax) Chunk options moved to a YAML in the cell after a hash pipe #|\n\nWider language support\nEasier to read\n\n\n\n\n\n\nIn Quarto, while the language is still specified in the curly brackets, the chunk options are organized in a YAML format within the cell. Each option is placed on its own line, prefaced by hashtags and pipes, making the code chunk more readable and supporting a variety of programming languages.\nFor those of you not familiar with code chunk options, don’t worry, we’ll cover these in a minute."
  },
  {
    "objectID": "materials/1-overview/slides.html#code-chunks-labels",
    "href": "materials/1-overview/slides.html#code-chunks-labels",
    "title": "Introduction\nto Quarto",
    "section": "Code chunks: Labels",
    "text": "Code chunks: Labels\n\n\n\n\n\nIdentifies code chunks\n\nMakes debugging easier\nCan reference code chunk outputs in the text\n\n\n\n\n\n```{r}\nlabel: summary-plot\n\nSome code to generate a plot...\n```\n\n\n\n\n\n\n\n\n\n\n\n\nAvoid using underscores (_) in labels and IDs.\n\n\nThis can cause problems when rendering to PDF with LaTeX. \n\n\n\n\n\n\nAnother significant improvement in Quarto is the inclusion of code chunk labels within the YAML of the cell instead of the curly brackets.\nLabeling chunks enhances document organization, simplifies debugging, and facilitates referencing code chunk outputs in the text, which is especially valuable for creating figures and tables in manuscripts or reports.\nA best practice to keep in mind is to refrain from using underscores in code chunk labels, as this can lead to rendering issues, particularly with LaTeX."
  },
  {
    "objectID": "materials/1-overview/slides.html#execution-options-outputs",
    "href": "materials/1-overview/slides.html#execution-options-outputs",
    "title": "Introduction\nto Quarto",
    "section": "Execution options: Outputs",
    "text": "Execution options: Outputs\n\n\n\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\neval\nEvaluate the code chunk (if false, just echos the code into the output).\n\n\necho\nInclude the source code in output\n\n\noutput\nInclude the results of executing the code in the output (true, false, or asis to indicate that the output is raw markdown and should not have any of Quarto’s standard enclosing markdown).\n\n\nwarning\nInclude warnings in the output.\n\n\nerror\nInclude errors in the output.\n\n\ninclude\nCatch all for preventing any output (code or results) from being included (e.g. include: false suppresses all output from the code block).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTab Completion is your friend!\n\n\n\n\n\n\n\n\n\nCode chunk options are parameters that modify the behavior of code chunks in your Quarto documents.\nIf the code throws and error or warning would you like them to be included in the resulting document? If your code produces a figure or table would you like them to be displayed?\nThese options can control various aspects of code execution and output display.\nHaving trouble remembering all of the options available to you? In Rstudio if you hit the tab key after the hashpipe a dropdown menu with available options is provided."
  },
  {
    "objectID": "materials/1-overview/slides.html#execution-options-figures",
    "href": "materials/1-overview/slides.html#execution-options-figures",
    "title": "Introduction\nto Quarto",
    "section": "Execution options: Figures",
    "text": "Execution options: Figures\n\n\n```{r}\nlibrary(ggplot2)\n\nggplot(iris, aes(x = Petal.Width, \n                 y = Petal.Length)) +\n  geom_point() +\n  labs(x = \"Petal width\",\n       y = \"Petal length\")\n```\n\n\nlibrary(ggplot2)\n\nggplot(iris, aes(x = Petal.Width, \n                 y = Petal.Length)) +\n  geom_point() +\n  labs(x = \"Petal width\",\n       y = \"Petal length\")\n\n\n\n\n\n\n\n\n\n\n\nLet’s walk through an example together.\nIn this code chunk we specify our coding language as r and use the ggplot package to plot petal width vs. petal length using the iris data.\nWhen we render this document our output will produce the code, the figure the code generated, and any error or warnings the code could encounter."
  },
  {
    "objectID": "materials/1-overview/slides.html#execution-options-figures-1",
    "href": "materials/1-overview/slides.html#execution-options-figures-1",
    "title": "Introduction\nto Quarto",
    "section": "Execution options: Figures",
    "text": "Execution options: Figures\n\n\n```{r}\n#| echo: false\n\nlibrary(ggplot2)\n\nggplot(iris, aes(x = Petal.Width, \n                 y = Petal.Length)) +\n  geom_point() +\n  labs(x = \"Petal width\",\n       y = \"Petal length\")\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s run that same code chunk again but this time we’ll include the echo = false code chunk option.\nBy adding our echo option and specifying it as false, our output no longer includes the source code."
  },
  {
    "objectID": "materials/1-overview/slides.html#execution-options-figures-2",
    "href": "materials/1-overview/slides.html#execution-options-figures-2",
    "title": "Introduction\nto Quarto",
    "section": "Execution options: Figures",
    "text": "Execution options: Figures\n\n\n```{r}\n#| echo: false\n#| fig-width: 3\n#| fig-height: 2\n\nlibrary(ggplot2)\n\nggplot(iris, aes(x = Petal.Width, \n                 y = Petal.Length)) +\n  geom_point() +\n  labs(x = \"Petal width\",\n       y = \"Petal length\")\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also use code chunk options to adjust the width and height of the figure. Here we set the figure width to 3 and the figure height to 2."
  },
  {
    "objectID": "materials/1-overview/slides.html#execution-options-figures-3",
    "href": "materials/1-overview/slides.html#execution-options-figures-3",
    "title": "Introduction\nto Quarto",
    "section": "Execution options: Figures",
    "text": "Execution options: Figures\n\n\n```{r}\n#| echo: false\n#| fig-width: 5\n#| fig-height: 5\n\nlibrary(ggplot2)\n\nggplot(iris, aes(x = Petal.Width, \n                 y = Petal.Length)) +\n  geom_point() +\n  labs(x = \"Petal width\",\n       y = \"Petal length\")\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\nOr we can make the figure larger by setting the figure width and height to 5."
  },
  {
    "objectID": "materials/1-overview/slides.html#execution-options-figures-4",
    "href": "materials/1-overview/slides.html#execution-options-figures-4",
    "title": "Introduction\nto Quarto",
    "section": "Execution options: Figures",
    "text": "Execution options: Figures\n\n\n```{r}\n#| echo: false\n#| fig-width: 5\n#| fig-height: 5\n#| fig-cap: \"This is my really neat plot.\"\n\nlibrary(ggplot2)\n\nggplot(iris, aes(x = Petal.Width, \n                 y = Petal.Length)) +\n  geom_point() +\n  labs(x = \"Petal width\",\n       y = \"Petal length\")\n\n```\n\n\n\n\n\n\nThis is my really neat plot.\n\n\n\n\n\n\n\nLet’s add a caption to our figure using the fig-cap option."
  },
  {
    "objectID": "materials/1-overview/slides.html#execution-options-yaml",
    "href": "materials/1-overview/slides.html#execution-options-yaml",
    "title": "Introduction\nto Quarto",
    "section": "Execution options: YAML",
    "text": "Execution options: YAML\n\n\n\n\n\n\n\n\n\n\n\nExecution options at the document level in the YAML\n\n\nAvoids having to reapply options for each code chunk! \n\n\n\n\n\n---\ntitle: \"My FWS Report\"\nauthor: Jane Biologist\nformat: html\n---\n\n\n\nIf you’d like to apply the same code chunk options to all code chunks throughout the document, you can add them in the document’s YAML rather than adding them to every code chunk."
  },
  {
    "objectID": "materials/1-overview/slides.html#execution-options-yaml-1",
    "href": "materials/1-overview/slides.html#execution-options-yaml-1",
    "title": "Introduction\nto Quarto",
    "section": "Execution options: YAML",
    "text": "Execution options: YAML\n\n\n\n\n\n\n\n\n\n\n\nExecution options at the document level in the YAML\n\n\nAvoids having to reapply options for each code chunk! \n\n\n\n\n\n---\ntitle: \"My FWS Report\"\nauthor: Jane Biologist\nformat:\n  html:\n    fig-width: 5\n    fig-height: 5\nexecute:\n  echo: false\n---"
  },
  {
    "objectID": "materials/1-overview/slides.html#exercise-4-code-chunks",
    "href": "materials/1-overview/slides.html#exercise-4-code-chunks",
    "title": "Introduction\nto Quarto",
    "section": "Exercise 4: Code chunks",
    "text": "Exercise 4: Code chunks\n\n\n\n\n\n\n\n−+\n10:00"
  },
  {
    "objectID": "materials/1-overview/slides.html#exercise-5-your-turn",
    "href": "materials/1-overview/slides.html#exercise-5-your-turn",
    "title": "Introduction\nto Quarto",
    "section": "Exercise 5: Your turn",
    "text": "Exercise 5: Your turn\n\n\n\n\n\n\n\n−+\n10:00"
  },
  {
    "objectID": "materials/1-overview/slides.html#wrap-up",
    "href": "materials/1-overview/slides.html#wrap-up",
    "title": "Introduction\nto Quarto",
    "section": "Wrap up",
    "text": "Wrap up\n\n\n\n\n\nQuarto is a powerful tool for creating scientific documents, presentations, and websites.\nThree basic components of a Quarto file control the rendered output:\n\nYAML metadata\nText body\nCode chunks\n\nOnce you understand the basics, the sky’s the limit!"
  },
  {
    "objectID": "materials/1-overview/exercises.html",
    "href": "materials/1-overview/exercises.html",
    "title": "Introduction to Quarto",
    "section": "",
    "text": "These exercises introduce you to key elements of Quarto documents. You will have the opportunity to explore how these elements enable you to create quality documents that effectively communicate and document your analyses and findings.\nThere are five exercises to enhance your familiarity with Quarto documents. The first exercise introduces you to options for rendering a Quarto file into a document. The second exercise focuses on understanding YAML headers, where you will learn to customize metadata such as title and author. Next, you will dive into the document body, exploring formatting options to organize your content effectively. During the fourth exercise, you will be introduced to code chunks, allowing you to embed and execute code in R, Python, or Julia, creating dynamic reports that showcase your analysis. The final exercise provides an opportunity to apply your new skills by creating a Quarto report. Through these exercises, you will develop essential skills to create professional Quarto documents.\nFor additional resources on Quarto documents, please visit:\n\nQuarto references\nQuarto Guidance webpage\nQuarto Cheatsheet",
    "crumbs": [
      "Overview of Quarto",
      "- Exercises"
    ]
  },
  {
    "objectID": "materials/1-overview/exercises.html#sec-exercise-overview",
    "href": "materials/1-overview/exercises.html#sec-exercise-overview",
    "title": "Introduction to Quarto",
    "section": "",
    "text": "These exercises introduce you to key elements of Quarto documents. You will have the opportunity to explore how these elements enable you to create quality documents that effectively communicate and document your analyses and findings.\nThere are five exercises to enhance your familiarity with Quarto documents. The first exercise introduces you to options for rendering a Quarto file into a document. The second exercise focuses on understanding YAML headers, where you will learn to customize metadata such as title and author. Next, you will dive into the document body, exploring formatting options to organize your content effectively. During the fourth exercise, you will be introduced to code chunks, allowing you to embed and execute code in R, Python, or Julia, creating dynamic reports that showcase your analysis. The final exercise provides an opportunity to apply your new skills by creating a Quarto report. Through these exercises, you will develop essential skills to create professional Quarto documents.\nFor additional resources on Quarto documents, please visit:\n\nQuarto references\nQuarto Guidance webpage\nQuarto Cheatsheet",
    "crumbs": [
      "Overview of Quarto",
      "- Exercises"
    ]
  },
  {
    "objectID": "materials/1-overview/exercises.html#set-up",
    "href": "materials/1-overview/exercises.html#set-up",
    "title": "Introduction to Quarto",
    "section": "Set up",
    "text": "Set up\n\nComplete the Prework steps to download the exercise materials",
    "crumbs": [
      "Overview of Quarto",
      "- Exercises"
    ]
  },
  {
    "objectID": "materials/1-overview/exercises.html#sec-exercise1",
    "href": "materials/1-overview/exercises.html#sec-exercise1",
    "title": "Introduction to Quarto",
    "section": "Exercise 1: Rendering",
    "text": "Exercise 1: Rendering\nRendering in Quarto documents refers to the process of converting a Quarto file, which is written in a markdown-like syntax, into a final output format such as HTML, PDF, or Word. During rendering, the Quarto system interprets the markdown content, processes embedded R code chunks, and generates the respective output by applying formatting specified in the YAML header. This transformation allows users to produce well-structured and visually appealing documents that incorporate text, data visualizations, and analysis results seamlessly, making it an essential step in creating dynamic reports and presentations.\n\nTasks\n\nOpen 1_rendering.qmd. What are three main components of the file?\nRender the document using the RStudio GUI (  ).\nRender the document using the Quarto CLI.\n\n\n\nHint\n\nIn the terminal: quarto render 1_rendering\\&lt;input file name&gt;\n\n\nRender the document using the quarto R package.\n\n\n\nHint\n\nIn the console: quarto::quarto_render(\"./1_rendering/&lt;input file&gt;\")",
    "crumbs": [
      "Overview of Quarto",
      "- Exercises"
    ]
  },
  {
    "objectID": "materials/1-overview/exercises.html#sec-exercise2",
    "href": "materials/1-overview/exercises.html#sec-exercise2",
    "title": "Introduction to Quarto",
    "section": "Exercise 2: YAML metadata",
    "text": "Exercise 2: YAML metadata\nA YAML (Yet Another Markup Language) header is a crucial component of Quarto documents that defines metadata for the document, typically enclosed within a pair of triple-dashed lines at the beginning of the file. It allows users to specify important information such as the document’s title, author, date, and output formats (like HTML, PDF, or Word). Additionally, YAML headers can include parameters to control formatting options and customize the behavior of the document, such as including bibliographies or setting specific themes. By using a YAML header, authors can ensure that their documents are well-organized and professionally presented.\n\nTasks\n\nOpen 2_yaml_metadata.qmd and render the document.\nUpdate the subtitle and replace the author name with your name. Re-render it.\nChange the output to a PDF and render it. What did you notice?\nNow render it as a MS Word document (docx). Open the file to view the results.\n\nBonus tasks\n\nRender the document as a Word document using the MS_Style.docx file in the templates folder.\n\n\n\nHint\n\nUsing templates\n\n\nRender the document simultaneously as a Word document and a PDF.\n\n\n\nHint\n\nAdd output_format = \"all\" argument to quarto::quarto_render()",
    "crumbs": [
      "Overview of Quarto",
      "- Exercises"
    ]
  },
  {
    "objectID": "materials/1-overview/exercises.html#sec-exercise3",
    "href": "materials/1-overview/exercises.html#sec-exercise3",
    "title": "Introduction to Quarto",
    "section": "Exercise 3: Document body",
    "text": "Exercise 3: Document body\nThe document body of a Quarto document is the main content area where the narrative, analysis, and findings are presented. This section is typically written in markdown format, allowing users to easily incorporate various elements such as headings, paragraphs, lists, tables, and images. The importance of the document body lies in its role as the primary medium for communicating information and insights to the reader; it organizes thoughts and results in a coherent and engaging manner. A well-structured document body enhances readability and comprehension, enabling the audience to grasp complex ideas and data more effectively. By integrating both text and visual elements, the document body plays a critical role in making the overall document informative and visually appealing.\n\nTasks\nOpen 3-document_body.qmd and make the following changes to the document:\nInline:\n\nItalicize the species name\nMake the refuge name into a hyperlink to the refuge website\n\nBlock:\n\nCreate a new header named “My list”\nMake an ordered and unordered list\nInsert an image of the western snow plover below the “U.S. Fish and Wildlife Service” header. The image can be found in the ./images folder.",
    "crumbs": [
      "Overview of Quarto",
      "- Exercises"
    ]
  },
  {
    "objectID": "materials/1-overview/exercises.html#sec-exercise4",
    "href": "materials/1-overview/exercises.html#sec-exercise4",
    "title": "Introduction to Quarto",
    "section": "Exercise 4: Code chunks",
    "text": "Exercise 4: Code chunks\nCode chunks in a Quarto document are sections of embedded code, typically written in R or other programming languages, that allow users to perform data analysis, generate visualizations, and execute computations directly within the document. These chunks are enclosed by specific delimiters, enabling Quarto to recognize and execute the code during the rendering process. The importance of code chunks lies in their ability to integrate dynamic content with narrative text, making it possible to showcase real-time analysis and results alongside explanatory writing. This functionality enhances reproducibility, as the document can simultaneously present the code and its output, facilitating transparency and allowing others to verify or replicate the findings. By incorporating code chunks, Quarto documents become interactive and informative, transforming static reports into live analytical narratives.\n\nTasks\nOpen 4_code_chunks.qmd and make the following changes to the rendered document:\n\nLabel the plot code chunk to help you differentiate from other chunks.\nUpdate the figure caption to read “Mean monthly Western…”\nAdd + theme_classic() to end of ggplot script to clean up plot. Re-render.\nRemove the output of a code chunk. Change include option to false and re-render.",
    "crumbs": [
      "Overview of Quarto",
      "- Exercises"
    ]
  },
  {
    "objectID": "materials/1-overview/exercises.html#sec-exercise5",
    "href": "materials/1-overview/exercises.html#sec-exercise5",
    "title": "Introduction to Quarto",
    "section": "Exercise 5: Your turn!",
    "text": "Exercise 5: Your turn!\nYou have now learned how to render a Quarto document and how to change the look and feel of a Quarto document by customizing the YAML metadata, inline and block elements of the text body, and code chunks. Now it is time to apply these skills by creating a Quarto document from scratch.\nDo your best to recreate the document below. When rendered as a .html, your file should look exactly the same aside from the publishing date. Use the Tasks as a guide.\n\n\nTasks\n\nCreate a new Quarto document.\n\n\nHint\n\nFile &gt; New File &gt; Quarto Document\n\nEdit the YAML to match the title and today’s date. Any time your file renders, it should display the current day. Add a parameter called alpha, and set alpha to a value of 20.\nWrite out your headers and fill in the report content. Don’t forget to match styling (e.g., bold, italics, lists) where applicable.\nIn the Results section, use inline R code for the survey year. You can use the following code to obtain the current year: format(Sys.Date(), '%Y')\nCompute the plover index using inline R code. The formula for the imaginary plover index is \\(\\pi \\alpha\\), where \\(\\alpha\\) is the parameter you defined in the YAML.\nUse a code block and the function hist() to generate a histogram of male plover counts. Make sure to add your figure caption and ensure that the code chunk does not display when you render. Below, you will find some helpful code to get the list of male counts, named plovers, from your data file:\n\n\ndata &lt;- read.csv(\"data/plover_data.csv\")\nplovers &lt;- data$Males\n\n\n\nHint\n\nThe chunk options you are looking for are echo and fig-cap. Use hist(plovers) to generate the plot.\n\nBonus tasks\n\nReplace “Many” in the Results section with the true total of male counts from the plovers list. Suggestion: use the sum() function.\nYour supervisor tells you that the \\(\\alpha\\) value for your calculations is actually 30. Update and re-render your file without changing the document body. Your supervisor also tells you she wants you to send her a Word document of the report but upload a PDF to ServCat. Render both formats.",
    "crumbs": [
      "Overview of Quarto",
      "- Exercises"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About the Workshop",
    "section": "",
    "text": "McCrea is a supervisory biometrician with the FWS Refuge Inventory and Monitoring Program based in Anchorage, Alaska. He enjoys working with biologists to ensure that surveys are scientifically rigorous and produce data that are findable, accessible, interoperable, and reusable (FAIR). He is an avid R user and enjoys developing script-based workflows. You can learn more about McCrea and the rest of the Alaska I&M Team here.\n\n\n\n\n\n\n\n\n\nJacob is a fish biologist with the FWS Lower Great Lakes Fish and Wildlife Conservation Office in Basom, NY. He leads the Aquatic Invasive Species programs early detection and monitoring efforts across the lower Great Lakes. Along with managing fieldwork operations, Jacob emphasizes efficiency through workflows and automation to improve program capacity and data availability. You can learn more about the work his office is involved with here.\n\n\n\n\n\n\n\n\n\nJason is a data manager with the FWS Midwest Fisheries Center Data Branch that provides data support to staff in FWS Midwest Region’s Fisheries and Aquatic Conservation program. You can learn more about Jason and the rest of the Data Branch here.\n\n\n\n\n\n\n\n\n\nEmma is a data management technician with the FWS Refuge Inventory and Monitoring Program based in Anchorage, Alaska.\n\n\n\n\n\n\n\n\n\nJonah is a data manager with the USFWS Fisheries and Ecological Services program in the Alaska region. He is passionate about fostering a data-centric culture and works closely with biologists and managers to ensure stakeholders have reliable access to data following FAIR principles that lead to informed conservation decisions. Jonah is a strong advocate for the use of R and developing reproducible workflows. Find more information about Jonah and the rest of the Alaska Data Management Team here."
  },
  {
    "objectID": "about.html#teaching-team",
    "href": "about.html#teaching-team",
    "title": "About the Workshop",
    "section": "",
    "text": "McCrea is a supervisory biometrician with the FWS Refuge Inventory and Monitoring Program based in Anchorage, Alaska. He enjoys working with biologists to ensure that surveys are scientifically rigorous and produce data that are findable, accessible, interoperable, and reusable (FAIR). He is an avid R user and enjoys developing script-based workflows. You can learn more about McCrea and the rest of the Alaska I&M Team here.\n\n\n\n\n\n\n\n\n\nJacob is a fish biologist with the FWS Lower Great Lakes Fish and Wildlife Conservation Office in Basom, NY. He leads the Aquatic Invasive Species programs early detection and monitoring efforts across the lower Great Lakes. Along with managing fieldwork operations, Jacob emphasizes efficiency through workflows and automation to improve program capacity and data availability. You can learn more about the work his office is involved with here.\n\n\n\n\n\n\n\n\n\nJason is a data manager with the FWS Midwest Fisheries Center Data Branch that provides data support to staff in FWS Midwest Region’s Fisheries and Aquatic Conservation program. You can learn more about Jason and the rest of the Data Branch here.\n\n\n\n\n\n\n\n\n\nEmma is a data management technician with the FWS Refuge Inventory and Monitoring Program based in Anchorage, Alaska.\n\n\n\n\n\n\n\n\n\nJonah is a data manager with the USFWS Fisheries and Ecological Services program in the Alaska region. He is passionate about fostering a data-centric culture and works closely with biologists and managers to ensure stakeholders have reliable access to data following FAIR principles that lead to informed conservation decisions. Jonah is a strong advocate for the use of R and developing reproducible workflows. Find more information about Jonah and the rest of the Alaska Data Management Team here."
  },
  {
    "objectID": "about.html#source-code",
    "href": "about.html#source-code",
    "title": "About the Workshop",
    "section": "Source code",
    "text": "Source code\nThis source code and license for all of the materials found on this website can be found on Github ."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Quarto",
    "section": "",
    "text": "Introduction  to  Quarto\n\n\n\n\n\n\nWelcome! This workshop provides an introduction of Quarto for intermediate to advanced R users seeking to develop automated reports. We present on the basics of Quarto and then walk through the three primary components of a Quarto file: the YML metdata, text, and code blocks. After describing each component, we offer brief exercises that provide participants with time to explore how these components customize documents. Participants will leave with foundational skills required to create a Quarto report.\nMaterials\n\nPrework\nSlides and Exercises"
  },
  {
    "objectID": "materials/1-overview/index.html",
    "href": "materials/1-overview/index.html",
    "title": "Overview of Quarto",
    "section": "",
    "text": "Full Screen\n\n\nLearning goals\n\nIntroduce Quarto and it’s applications\nDescribe the three components of a Quarto file: QML metadata, text body, and code blocks\nProvide opportunities to explore the components of a Quarto file through in-class exercises",
    "crumbs": [
      "Overview of Quarto",
      "- Slides"
    ]
  },
  {
    "objectID": "materials/presentations/index.html",
    "href": "materials/presentations/index.html",
    "title": "Presentations with Quarto",
    "section": "",
    "text": "Full Screen\n\n\nLearning goals\n\nIntroduce Revealjs presentations using Quarto\nDescribe YAML options for presentations\nDescribe markdown syntax for creating slides\nIntroduce themes and describe how to customize themes using a SCSS file\nIntroduce advanced features to further customize the look and feel of presentation slides"
  },
  {
    "objectID": "prework.html",
    "href": "prework.html",
    "title": "Prework",
    "section": "",
    "text": "From FWS Apps-To-Go, install:\n\nR 4.4.2 or newer\nRStudio 2024.09.1 or newer\n\nOpen a new RStudio session.\nDownload the exercise materials. This function creates a new RStudio project called “intro-to-quarto-exercises-main”.\n\n\nif (!require(\"usethis\")) install.packages(\"usethis\")\nusethis::use_course(\"https://github.com/USFWS/intro-to-quarto-exercises/archive/refs/heads/main.zip\")"
  },
  {
    "objectID": "prework.html#download-the-exercise-materials",
    "href": "prework.html#download-the-exercise-materials",
    "title": "Prework",
    "section": "",
    "text": "From FWS Apps-To-Go, install:\n\nR 4.4.2 or newer\nRStudio 2024.09.1 or newer\n\nOpen a new RStudio session.\nDownload the exercise materials. This function creates a new RStudio project called “intro-to-quarto-exercises-main”.\n\n\nif (!require(\"usethis\")) install.packages(\"usethis\")\nusethis::use_course(\"https://github.com/USFWS/intro-to-quarto-exercises/archive/refs/heads/main.zip\")"
  },
  {
    "objectID": "prework.html#install-r-package-dependencies",
    "href": "prework.html#install-r-package-dependencies",
    "title": "Prework",
    "section": "2. Install R package dependencies",
    "text": "2. Install R package dependencies\n\nOpen this new RStudio project, if it’s not already open.\nInstall the R package dependencies:\n\n\nsource(\"install_packages.R\")"
  },
  {
    "objectID": "prework.html#install-tinytex",
    "href": "prework.html#install-tinytex",
    "title": "Prework",
    "section": "3. Install tinyTeX",
    "text": "3. Install tinyTeX\n\nTo render Quarto documents as a PDF, you will need to install a version of LaTex. You can do this by running the function below:\n\n\ntinytex::install_tinytex()"
  },
  {
    "objectID": "materials/presentations/slides.html#revealjs",
    "href": "materials/presentations/slides.html#revealjs",
    "title": "Introduction\nto Quarto",
    "section": "Revealjs",
    "text": "Revealjs\n\n\n\nAn open source HTML presentation framework\nChange styles with CSS/SCSS\nCustomize with JavaScript\nMarkdown and LateX support\n\n\n\n\n\n\nAn open source HTML presentation framework\nChange styles with CSS/SCSS\nCustomize with JavaScript\nMarkdown and LateX support"
  },
  {
    "objectID": "materials/presentations/slides.html#yaml-options",
    "href": "materials/presentations/slides.html#yaml-options",
    "title": "Introduction\nto Quarto",
    "section": "YAML options",
    "text": "YAML options"
  },
  {
    "objectID": "materials/presentations/slides.html#themes",
    "href": "materials/presentations/slides.html#themes",
    "title": "Introduction\nto Quarto",
    "section": "Themes",
    "text": "Themes"
  },
  {
    "objectID": "materials/presentations/slides.html#customizing-themes-scss",
    "href": "materials/presentations/slides.html#customizing-themes-scss",
    "title": "Introduction\nto Quarto",
    "section": "Customizing themes: SCSS",
    "text": "Customizing themes: SCSS\n\n\nYAML\n---\ntitle: \"My really cool presentation\"\nformat:\n  revealjs\n    theme: [default, custom.scss]\n---\n\ncustom.scss\n/*-- scss:defaults --*/\n\n// fonts\n$font-family-sans-serif: \"Palatino Linotype\", \"Book Antiqua\", Palatino,\n  FreeSerif, serif !default;\n\n// colors\n$body-bg: #f0f1eb !default;\n$body-color: #000 !default;\n$link-color: #51483d !default;\n$selection-bg: #26351c !default;\n\n// headings\n$presentation-heading-font: \"Palatino Linotype\", \"Book Antiqua\", Palatino,\n  FreeSerif, serif !default;\n$presentation-heading-color: #383d3d !default;"
  },
  {
    "objectID": "materials/presentations/slides.html#advanced-features",
    "href": "materials/presentations/slides.html#advanced-features",
    "title": "Introduction\nto Quarto",
    "section": "Advanced features",
    "text": "Advanced features"
  },
  {
    "objectID": "materials/presentations/slides.html#creating-slides",
    "href": "materials/presentations/slides.html#creating-slides",
    "title": "Introduction\nto Quarto",
    "section": "Creating slides",
    "text": "Creating slides\n\nSlides -Sections"
  },
  {
    "objectID": "materials/presentations/slides.html#incremental-lists",
    "href": "materials/presentations/slides.html#incremental-lists",
    "title": "Introduction\nto Quarto",
    "section": "Incremental lists",
    "text": "Incremental lists"
  },
  {
    "objectID": "materials/presentations/slides.html#columns",
    "href": "materials/presentations/slides.html#columns",
    "title": "Introduction\nto Quarto",
    "section": "Columns",
    "text": "Columns"
  },
  {
    "objectID": "materials/presentations/slides.html#overflowing-content",
    "href": "materials/presentations/slides.html#overflowing-content",
    "title": "Introduction\nto Quarto",
    "section": "Overflowing content",
    "text": "Overflowing content"
  },
  {
    "objectID": "materials/presentations/slides.html#speaker-notes",
    "href": "materials/presentations/slides.html#speaker-notes",
    "title": "Introduction\nto Quarto",
    "section": "Speaker notes",
    "text": "Speaker notes"
  },
  {
    "objectID": "materials/presentations/slides.html#themes-1",
    "href": "materials/presentations/slides.html#themes-1",
    "title": "Introduction\nto Quarto",
    "section": "Themes",
    "text": "Themes\n\n\n---\ntitle: \"My really cool presentation\"\nformat: revealjs\n---\n\n\n\n\n\n\nReveal themes"
  },
  {
    "objectID": "materials/presentations/slides.html#footers-and-logos",
    "href": "materials/presentations/slides.html#footers-and-logos",
    "title": "Introduction\nto Quarto",
    "section": "Footers and logos",
    "text": "Footers and logos"
  },
  {
    "objectID": "materials/presentations/slides.html#code-block-options",
    "href": "materials/presentations/slides.html#code-block-options",
    "title": "Introduction\nto Quarto",
    "section": "Code block options",
    "text": "Code block options"
  },
  {
    "objectID": "materials/presentations/slides.html#code-highlighting",
    "href": "materials/presentations/slides.html#code-highlighting",
    "title": "Introduction\nto Quarto",
    "section": "Code highlighting",
    "text": "Code highlighting"
  },
  {
    "objectID": "materials/presentations/slides.html#code-output-location",
    "href": "materials/presentations/slides.html#code-output-location",
    "title": "Introduction\nto Quarto",
    "section": "Code output location",
    "text": "Code output location"
  },
  {
    "objectID": "materials/presentations/slides.html#slide-background",
    "href": "materials/presentations/slides.html#slide-background",
    "title": "Introduction\nto Quarto",
    "section": "Slide background",
    "text": "Slide background"
  },
  {
    "objectID": "materials/presentations/slides.html#embedding-websites",
    "href": "materials/presentations/slides.html#embedding-websites",
    "title": "Introduction\nto Quarto",
    "section": "Embedding websites",
    "text": "Embedding websites\n\n\n\nPresentations"
  },
  {
    "objectID": "materials/presentations/slides.html#themes-2",
    "href": "materials/presentations/slides.html#themes-2",
    "title": "Introduction\nto Quarto",
    "section": "Themes",
    "text": "Themes\n\n\n---\ntitle: \"My really cool presentation\"\nformat:\n  revealjs:\n    theme: night\n---\n\n\n\n\n\n\nReveal themes"
  },
  {
    "objectID": "materials/presentations/slides.html#themes-3",
    "href": "materials/presentations/slides.html#themes-3",
    "title": "Introduction\nto Quarto",
    "section": "Themes",
    "text": "Themes\n\n\n---\ntitle: \"My really cool presentation\"\nformat:\n  revealjs:\n    theme: solarized\n---\n\n\n\n\n\n\nReveal themes"
  },
  {
    "objectID": "materials/presentations/slides.html#customizing-themes",
    "href": "materials/presentations/slides.html#customizing-themes",
    "title": "Introduction\nto Quarto",
    "section": "Customizing themes",
    "text": "Customizing themes\n\n\n\n\nYAML\n---\ntitle: \"My really cool presentation\"\nformat:\n  revealjs\n    theme: [default, custom.scss]\n---\n\ncustom.scss\n\n/*-- scss:defaults --*/\n\n// fonts\n$font-family-sans-serif: \"Palatino Linotype\", \"Book Antiqua\", Palatino,\n  FreeSerif, serif !default;\n\n// colors\n$body-bg: #f0f1eb !default;\n$body-color: #000 !default;\n$link-color: #51483d !default;\n$selection-bg: #26351c !default;\n\n// headings\n$presentation-heading-font: \"Palatino Linotype\", \"Book Antiqua\", Palatino,\n  FreeSerif, serif !default;\n$presentation-heading-color: #383d3d !default;"
  },
  {
    "objectID": "materials/1-overview/slides.html#exercise-1",
    "href": "materials/1-overview/slides.html#exercise-1",
    "title": "Introduction\nto Quarto",
    "section": "Exercise 1: Rendering",
    "text": "Exercise 1: Rendering\n\n\n\n−+\n10:00"
  },
  {
    "objectID": "materials/1-overview/slides.html#section-6",
    "href": "materials/1-overview/slides.html#section-6",
    "title": "Introduction\nto Quarto",
    "section": "",
    "text": "Intro to Quarto"
  },
  {
    "objectID": "materials/1-overview/slides.html#inline-elements-code",
    "href": "materials/1-overview/slides.html#inline-elements-code",
    "title": "Introduction\nto Quarto",
    "section": "Inline elements: Code",
    "text": "Inline elements: Code\n\n\n\n\nSource code\n\nThis is an example of how you could use\ncode to calculate and report that the species\nin the iris dataset with the longest sepal \nlength is the \n`r iris[which.max(iris$Sepal.Length), \"Species\"]`.\n\n\nOutput\n\n\nThis is an example of how you could use code to calculate and report that species in the iris dataset with the longest sepal length is the virginica.\n\n\n\n\n\nThe final concept we’ll cover regarding code is inline code. Previously, we explored inline elements to modify font styles, embed images, and add hyperlinks; however, we can also incorporate code directly within the text of the document. To achieve this, we enclose the code in single backticks. After the initial backtick, we specify the code language, allowing Quarto to understand how to process the code. By using both inline code and code chunks, Quarto documents become highly dynamic and powerful tools for presenting information."
  }
]