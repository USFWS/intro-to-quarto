---
title: "Dynamic-Reporting-with-Quarto"
subtitle: "Knit to HTML Demonstration"
author: "Jason Ross, Jacob Cochran, and Jonah Withers (contact: Jonah_Withers@fws.gov for issues)"
date: "`r format(Sys.time(), '%B %d, %Y')`"
execute:
  echo: false
  # runtime: shiny
format: 
  html:
    toc: true
    toc_float: true
    toc_collapsed: true
editor: source
---

```{r}
#| label: libraries
#| warning: false
#| message: false

library(packrat)
library(tidyverse)
library(waterData)
library(lubridate)
library(kableExtra)
library(reactable)
library(flextable)
library(leaflet)
library(dygraphs)
library(mapview)
library(sf)
library(shiny)
library(maps)
```

```{r}
#| label: Import data
#| warning: false

# Import Atlantic salmon data from Winooski River lift
LLS_0 <- read.csv("../../Datasets/Demonstrations/LLS_WinooskiLift.csv",
                  header = TRUE,
                  stringsAsFactors = FALSE)

# Summarize Atlantic salmon data from Winooski River lift
LLS_Annual_Sum <- LLS_0 %>%
  
  dplyr::mutate(Samp_Date = lubridate::ymd(SampDate),
                Samp_Year = lubridate::year(SampDate),
                TL_mm = as.numeric(TL_mm),
                WT_g = as.numeric(WT_g)) %>% 
  
  dplyr::group_by(Samp_Year) %>% 
  
  dplyr::summarise(Count = n(),
                   Mean_TL_mm = round(mean(TL_mm,
                                          na.rm = TRUE), 2),
                   Mean_Wt_g	= round(mean(WT_g,
                                          na.rm = TRUE), 2))

# Import Boquet River water level data from USGS gauge 
Boquet_River_0 <- waterData::importDVs(staid = "04276500", 
                     code = "00060",
                     sdate = "2023-01-01",
                     edate = ymd(Sys.Date()))

# Create waypoint for NCTC 
NCTC <- tibble::tibble(name = "National Conservation Training Center",
                       latitude = 39.48737293408041,
                       longitude = -77.8054947317046)
```

# Introduction

This document demonstrates how to render a HTML document using **RMarkdown** 
([RMarkdown Cheat Sheet](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf)) 
and provides a few helpful links. Unlike Word and PDF documents which are static, 
rendering HTML files allows you the the ability to incorporate interactive 
figures, tables, and widgets. 



# Tables

Rendered HTML documents support a number of print engines. In this section, 
we'll review review and compare several of the more popular table types used. 

## Knitr (kable) Package

The Kable package helps you create basic, static tables that are easily rendered
in both PDF and HTML outputs.

  * Knitr (Kable) Resources:
    + <https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html>
    + <https://bookdown.org/yihui/rmarkdown-cookbook/kable.html>
    + <https://www.rdocumentation.org/packages/knitr/versions/1.42/topics/kable>

```{r}
#| label: Knitr kable

knitr::kable(LLS_Annual_Sum, 
             format = "simple", 
             align = 'lccc',
             caption = "Table 1. This is a nice table using knitr::kable.")
```

## KableExtra Package

The **KableExtra package** <https://haozhu233.github.io/kableExtra/> is not a 
table generating package, its a package that allows you to add features to a 
*kable()* object. Let's change the look of our table by adding a new style and
highlighting some specific rows.  

  * KableExtra Resources:
    + <https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html>
    + <https://bookdown.org/yihui/rmarkdown-cookbook/kableextra.html>
    + <https://www.rdocumentation.org/packages/kableExtra/versions/1.3.4>

```{r}
#| label: KableExtra

kableExtra::kbl(LLS_Annual_Sum,
                align = 'lccc',
                caption = "Table 2. This is a nice table using kableExtra::kbl.") %>%
  
  kableExtra::kable_classic(full_width = TRUE) %>%
  
  kableExtra::row_spec(c(2, 3, seq(7, 13, by = 1), 15, 28), 
                       bold = T, 
                       color = "white", 
                       background = "black")
```

## Flextable Package

The **Flextable package ** <https://ardata-fr.github.io/flextable-book/> is a 
great option for creating customizable tables that can rendered to Microsoft 
Word documents, PDFs, or HTML. 

  * Flextable Resources:
    + <https://ardata-fr.github.io/flextable-book/>
    + <https://cran.r-project.org/web/packages/flextable/flextable.pdf>
    + <https://davidgohel.github.io/flextable/reference/index.html>

```{r}
#| label: Flextable

# Set the defaults for flextable
flextable::set_flextable_defaults(font.size = 10, 
                       padding = 3,
                       theme_fun = theme_booktabs)

## Tell R to use the df printer as data.frame print method for the document 
flextable::use_df_printer()

## Converts dataframe to a flextable and format the table
flextable::flextable(LLS_Annual_Sum) %>%
  
  color(~Count < 30, 
        color = "red") %>% # Change color if Count > 30
  
  width(width = 1.1) %>% # set column width to 1.1 inches
  
  set_caption("Table 3. This is a nice table using the flextable package.", 
              style = "Table Caption") %>% 
  
  align(align = "center",
        part = "all") %>% # Center align all contents
  
  bold(j = 1) %>% # Bold values in first column
  
  colformat_num(., 
                j = 1,
                big.mark = "") # Remove comma separator for Year column
```

## Reactable Package

The **Reactable package** <https://glin.github.io/reactable/index.html> is the
first table we'll explore that creates an interactive table. This is one of our
favorite interactive tables since you can provide the user options to filter or 
search content within the table. There are several other options you can include
as well (grouping, styling, pagination, etc.).

* Reactable Resources:
    + <https://glin.github.io/reactable/index.html>
    + <https://cran.r-project.org/web/packages/reactable/index.html>
    + <https://www.rdocumentation.org/packages/reactable/versions/0.2.2/topics/reactable>

```{r}
#| label: Reactable

reactable::reactable(LLS_Annual_Sum,
                     searchable = TRUE,
                     filterable = TRUE)
```

# Figures

Similar to tables, figures rendered in HTML documents can provide more user 
capabilities than PDF and Word documents. In this section, we'll review and 
compare a few popular figure types. 

## Line graphs

### ggplot2

Lets start with a basic line graph using the ggplot2 package to see what the 
figure would look like if we produced it for a PDF or Word document.

  * ggplot2 Resources:
    + <https://ggplot2.tidyverse.org/reference/aes.html>
    + <https://ggplot2-book.org/toolbox.html>
    + <https://bookdown.dongzhuoer.com/hadley/ggplot2-book/aes.html>

```{r}
#| label: ggplot

ggplot2::ggplot(data = Boquet_River_0,
                aes(x = dates,
                    y = val)) +
  
  ggplot2::geom_point() +
  
  ggplot2::geom_line() +
  
  ggplot2::labs(x = "Month",
                y = "Water velocity (cfs)") +
  
  ggplot2::theme_bw() 
```

### Dygraphs

The dygraphs R package <https://rstudio.github.io/dygraphs/> allows you to build 
figures with interactive capabilities which can improve the experience of the 
user.  Notice the values presented in the upper right corner of the figure when 
you hover your mouse over a point on the graph. Also try using the slider along 
the bottom to zoom in to specific dates along the x-axis.
 
  * Dygraphs Resource:
    + <https://rstudio.github.io/dygraphs/>
    + <https://r-graph-gallery.com/316-possible-inputs-for-the-dygraphs-library.html>

```{r}
#| label: Dygraphs

dygraphs::dygraph(
  data.frame(time = Boquet_River_0 %>%
                              
               dplyr::select(dates),
             
             value = Boquet_River_0 %>%
               
               dplyr::select(val))) %>%
  
  dygraphs::dyRangeSelector() %>%
  
  dygraphs::dyAxis("x", 
                  label = "Date") %>%
  
  dygraphs::dyAxis("y", 
                  label = "Water velocity (cfs)") %>% 

  dygraphs::dyOptions(drawPoints = TRUE,
                     pointSize = 2,
                     fillGraph = TRUE)
```

### R Shiny

We do not have enough time to provide a thorough walk-through of R Shiny Apps 
(there could be an entire course devoted it) but we thought it would be useful 
to introduce the topic and provide an example and some resources for those of 
you that might be interested in pursuing it at a later date.

Before rendering our code, we need to change our YAML to include 
*runtime: shiny*.
 
  * RShiny  Resource:
    + <https://www.rstudio.com/products/shiny/>

```{r}
#| label: RShiny

# # Define UI for app that draws a scatter plot ----
# ui <- fluidPage(
# 
#   # App title ----
#   titlePanel("Check out our Shiny App!"),
# 
#   # Sidebar layout with input and output definitions ----
#   sidebarLayout(
# 
#     # Sidebar panel for inputs ----
#     sidebarPanel(
# 
#       # Input: Slider for the number of bins ----
#       selectInput(inputId = "Biometrics",
#                   label = "Biometrics:",
#                   choices = names(LLS_Annual_Sum)[-1])
# 
#     ),
# 
#     # Main panel for displaying outputs ----
#     mainPanel(
# 
#       # Output: Histogram ----
#       plotOutput(outputId = "distPlot")
# 
#     )
#   )
# )
# 
# 
# 
# # Define server logic required to draw a plot ----
# server <- function(input, output) {
# 
#   output$distPlot <- renderPlot({
# 
#     x <- LLS_Annual_Sum %>%
# 
#       dplyr::select(Samp_Year, input$Biometrics)
# 
#     plot(x,
#          xlab = colnames(x)[1],
#          ylab = colnames(x)[2],
#          main = paste("Scatter plot of year VS ",
#                       input$Biometrics,
#                       sep = ""),
#          col = "red")
# 
#     })
# 
# }
# 
# # Run app with specified ui and server
# shinyApp(ui = ui, server = server)
```

## Maps

Now lets explore some options for creating maps in R Markdown. 

### ggplot2

We can start with a static map using the ggplot2 package. We will make a map of
the lower 48 and overlay a gray point where NCTC is located. 

  * ggplot2 Resources:
  
    + <https://ggplot2.tidyverse.org/reference/aes.html>
    + <https://ggplot2-book.org/maps.html>
    + <https://bookdown.dongzhuoer.com/hadley/ggplot2-book/aes.html>
    
```{r}
#| label: ggplot2 map

ggplot() + 
  
  ggplot2::geom_polygon(data = ggplot2::map_data("state"),
               aes(x = long, 
                   y = lat, 
                   group = group),
                color = "black", 
               fill = "#D55E00") +
  
  ggplot2::geom_point(data = NCTC,
             aes(x = longitude, 
                 y = latitude),
             color = "black",
             shape = 21,
             fill = "#999999",
             size = 4) +
  
  ggplot2::labs(x = "Longitude",
                y = "Latitude") +
  
  ggplot2::theme_bw()
```

### Leaflet

Again, lets create a point at NCTC but this time we'll create an interactive 
map using the **Leaflet** package <https://rstudio.github.io/leaflet/>. 
The Leaflet package is a very popular package used to create interactive maps
but know there are others out there (plotly, highcharter, ggiraph, tmap, mapdeck, 
etc.). 

  * Leaflet Resources:
  
    + <https://cran.r-project.org/web/packages/leaflet/leaflet.pdf>
    + <https://bookdown.org/nicohahn/making_maps_with_r5/docs/leaflet.html>

```{r}
#| label: Leaflet

leaflet() %>%
  
  leaflet::addMarkers(data = NCTC,
                      lng = ~ longitude,
                      lat = ~ latitude,
                      label = ~ name,
                      popup = ~ as.character("NCTC")) %>% 
  
  leaflet::addProviderTiles("Esri.WorldTopoMap",  
                   group = "Satellite") %>%
  
  leaflet::addScaleBar(position = "topright")
```

### Mapview

Another popular package used to create interactive maps is the **mapview** 
package <https://r-spatial.github.io/mapview/>.

  * mapview Resources:
  
    + <https://www.rdocumentation.org/packages/mapview/versions/2.11.0/topics/mapView>
    + <https://cran.r-project.org/web/packages/mapview/mapview.pdf>
    + <https://bookdown.org/nicohahn/making_maps_with_r5/docs/mapview.html>

```{r}
#| label: mapview

NCTC_spatial <- sf::st_as_sf(NCTC, coords = c("longitude", "latitude"), 
                crs = 4326)

mapview::mapview(x = NCTC_spatial)
```